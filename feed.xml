<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://zjgcjy.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zjgcjy.github.io/" rel="alternate" type="text/html" /><updated>2019-12-12T12:05:43+08:00</updated><id>https://zjgcjy.github.io/feed.xml</id><title type="html">My way, though far away</title><subtitle>A flexible Blog of zjgcjy</subtitle><author><name>zjgcjy</name></author><entry><title type="html">Dirary_november</title><link href="https://zjgcjy.github.io/posts/2019-11/Dirary_November.html" rel="alternate" type="text/html" title="Dirary_november" /><published>2019-11-01T21:15:00+08:00</published><updated>2019-11-01T21:15:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-11/Dirary_November</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-11/Dirary_November.html">&lt;blockquote&gt;
  &lt;p&gt;每日所作所得&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;11月1日&quot;&gt;11月1日&lt;/h1&gt;</content><author><name>zjgcjy</name></author><category term="日记" /><summary type="html">每日所作所得 11月1日</summary></entry><entry><title type="html">Software_security_project</title><link href="https://zjgcjy.github.io/posts/2019-10/Software_Security_Project.html" rel="alternate" type="text/html" title="Software_security_project" /><published>2019-10-30T01:15:00+08:00</published><updated>2019-10-30T01:15:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-10/Software_Security_Project</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-10/Software_Security_Project.html">&lt;blockquote&gt;
  &lt;p&gt;Malware
vs2010&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;infocollection&quot;&gt;InfoCollection&lt;/h1&gt;

&lt;p&gt;configure&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/Snipaste_2019-10-31_16-06-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;warning&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/Snipaste_2019-10-31_16-07-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>zjgcjy</name></author><category term="malware" /><summary type="html">Malware vs2010 InfoCollection configure warning</summary></entry><entry><title type="html">Pacman_helper</title><link href="https://zjgcjy.github.io/posts/2019-10/Pacman_Helper.html" rel="alternate" type="text/html" title="Pacman_helper" /><published>2019-10-29T21:15:00+08:00</published><updated>2019-10-29T21:15:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-10/Pacman_Helper</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-10/Pacman_Helper.html">&lt;blockquote&gt;
  &lt;p&gt;pacman 手册&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xdty.org/1347&quot;&gt;archlinux pacman 命令&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/Pacman&quot;&gt;arch wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;pacman -Sy 仅同步源&lt;/p&gt;

&lt;p&gt;pacman -Syu 同步源，并更新系统&lt;/p&gt;

&lt;p&gt;pacman -Su –ignore foo 升级时不升级包foo&lt;/p&gt;

&lt;p&gt;pacman -S abc 从本地数据库中得到abc的信息，下载安装abc包&lt;/p&gt;

&lt;p&gt;pacman -Sy abc 和源同步后安装名为abc的包&lt;/p&gt;

&lt;p&gt;pacman -Sd abc 忽略依赖性问题，安装包abc&lt;/p&gt;

&lt;p&gt;pacman -Sf abc 强制安装包abc&lt;/p&gt;

&lt;p&gt;pacman -Si abc 从数据库中搜索包abc的信息&lt;/p&gt;

&lt;p&gt;pacman -Ss abc 搜索有关abc信息的包&lt;/p&gt;

&lt;p&gt;pacman -Sg abc 查询abc这个包组包含的软件包&lt;/p&gt;

&lt;p&gt;pacman -Sw abc 下载包而不安装它&lt;/p&gt;

&lt;p&gt;pacman -R abc 删除abc包&lt;/p&gt;

&lt;p&gt;pacman -Rc abc 删除abc包和依赖abc的包&lt;/p&gt;

&lt;p&gt;pacman -Rsn abc 删除包所有不需要的依赖包并删除其配置文件&lt;/p&gt;

&lt;p&gt;pacman -Rscn abc 删除abc包所有不需要的依赖包和依赖abd的包并删除其配置文件&lt;/p&gt;

&lt;p&gt;pacman -Sc 清理/var/cache/pacman/pkg目录下的旧包&lt;/p&gt;

&lt;p&gt;pacman -Scc 清除所有下载的包和数据库&lt;/p&gt;

&lt;p&gt;pacman -Q 列出系统中所有的包&lt;/p&gt;

&lt;p&gt;pacman -Q package 在本地包数据库搜索(查询)指定软件包&lt;/p&gt;

&lt;p&gt;pacman -Qi package 在本地包数据库搜索(查询)指定软件包并列出相关信息&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;pacman -Q&lt;/td&gt;
      &lt;td&gt;wc -l 统计当前系统中的包数量&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;pacman -Qdt 找出孤立包&lt;/p&gt;

&lt;p&gt;pacman -Rns $(pacman -Qtdq) 删除孤立软件包（递归的,小心用)&lt;/p&gt;

&lt;p&gt;pacman -U abc.pkg.tar.gz 安装下载的abs包，或新编译的本地abc包&lt;/p&gt;

&lt;p&gt;pacman-optimize &amp;amp;&amp;amp; sync 提高数据库访问速度&lt;/p&gt;

&lt;p&gt;==== 提高pacman数据访问 ====&lt;/p&gt;

&lt;h1 id=&quot;pacman-optimize--sync&quot;&gt;pacman-optimize &amp;amp;&amp;amp; sync&lt;/h1&gt;

&lt;p&gt;==== 使用wget ====&lt;/p&gt;

&lt;p&gt;修改/etc/pacman.conf并在其中的[options]&lt;/p&gt;

&lt;p&gt;XferCommand = /usr/bin/wget -c –passive-ftp -c %u&lt;/p&gt;

&lt;p&gt;来自：http://www.douban.com/group/topic/17909752/&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Pacman手册&lt;/p&gt;

&lt;p&gt;名称&lt;/p&gt;

&lt;p&gt;pacman – 软件包管理器&lt;/p&gt;

&lt;p&gt;句法&lt;/p&gt;

&lt;p&gt;pacman &lt;命令&gt; [选项] [软件包名称]&lt;/命令&gt;&lt;/p&gt;

&lt;p&gt;描述&lt;/p&gt;

&lt;p&gt;pacman是linux系统上的用于记录安装的软件包信息的管理器。它的主要特点有：支持依赖、软件包组、安装卸载关联以及与远程服务器同步信息然后更新系统。pacman的软件包格式是.tar.gz的压缩格式。&lt;/p&gt;

&lt;p&gt;3.0.0版以来，pacman一直是linkman:libalpm（即”Arch Linux软件包管理“函数库）的前端。这个函数库支持不同写法的前端（例如，它支持图形化前端）。&lt;/p&gt;

&lt;p&gt;命令&lt;/p&gt;

&lt;p&gt;-Q，–query 查询&lt;/p&gt;

&lt;p&gt;查询软件包数据库。运用这条命令你不仅可以查看已安装软件包以及所含文件的信息，还可以查看独立软件包的元信息（meta-information）（包括软件包的依赖，冲突，安装日期，创建日期，大小）。这条命令可已对本机的软件包数据库执行，也可以对独立的.tar.gz包执行。具体参看下面的查询选项。&lt;/p&gt;

&lt;p&gt;-R, –remove 移除&lt;/p&gt;

&lt;p&gt;从系统中移除某个软件包。该命令也可以对软件包组执行，执行后，软件包组内所有的软件包都会被移除。属于指定软件包的文件会被删除，而后软件包数据库会执行更新。除非加上–nosave(不保存)选项，移除软件包的配置文件都会以.pacsave的后缀保存。具体参看下面的移除选项。&lt;/p&gt;

&lt;p&gt;-S, –sync 同步&lt;/p&gt;

&lt;p&gt;同步软件包。软件包是从frp服务器上直接下载安装的，与之一同安装的还有运行软件所需的所有依赖。例如，pacman -S qt 会下载并安装qt以及qt的所有依赖。如果同一名称的软件包存在与不同的源中，可以指定源：pacman -S testing/qt。同样也可以给定版本要求：pacman -S “bash&amp;gt;=3.2”（引号是必需的，否则设shell会将“&amp;gt;”理解为重定向）。&lt;/p&gt;

&lt;p&gt;可以指定软件包，也可以指定软件包组。例如，如果gnome是一个已定义的软件包组，那么执行pacman -S gnome就会将gnome组中所有的软件包安装，当然也会安装这些软件包的依赖。&lt;/p&gt;

&lt;p&gt;pacman也可以处理一些具有相同或相近作用的软件包。例如，执行pacman -S foo，pacman首先会搜索名为foo的软件包。如果没有找到的话，pacman就会搜索一些具有相同或相近作用的软件包。如果找到了具有相同或相近作用的软件包，这些软件包就会被安装。&lt;/p&gt;

&lt;p&gt;你也可以用pacman -Su来升级本机上所有陈旧的软件包升级是这样进行的：pacman先将本机上的软件包同远程服务器上的软件包进行版本对比。版本对比是按照如下规则进行的：&lt;/p&gt;

&lt;p&gt;字母顺序：&lt;/p&gt;

&lt;p&gt;1.0a&amp;lt;1.0alpha&amp;lt;1.0b&amp;lt;1.0beta&amp;lt;1.0p&amp;lt;1.0pre&amp;lt;1.0rc&amp;lt;1.0&lt;/p&gt;

&lt;p&gt;数字顺序：&lt;/p&gt;

&lt;p&gt;1&amp;lt;1.0&amp;lt;1.1&amp;lt;1.1.1&amp;lt;1.2&amp;lt;2.0&amp;lt;3.0.0&lt;/p&gt;

&lt;p&gt;-U, –update&lt;/p&gt;

&lt;p&gt;升级软件包，或安装软件包。可以给定一个URL网址，也可以给定一个文件路径。升级的过程是一个“移除，然后安装”的过程。想知道pacman如何处理配置文件，请查看处理配置文件&lt;/p&gt;

&lt;p&gt;-V, –version 版本&lt;/p&gt;

&lt;p&gt;显示版本，然后退出。&lt;/p&gt;

&lt;p&gt;-h， –help 帮助&lt;/p&gt;

&lt;p&gt;显示给定命令的句法。如果没有给定命令，显示的将是全部命令的句法。&lt;/p&gt;

&lt;p&gt;通用选项&lt;/p&gt;

&lt;p&gt;–asdeps [as dependency(作为依赖)]&lt;/p&gt;

&lt;p&gt;模糊安装软件包;换句话说，就是假定该软件包安装的原因是由于依赖。在使用makepkg以及其他从源代码编译的工具时，需要在编译一个软件包之前安装该软件包的依赖，这时候，这个命令选项就十分有用了。&lt;/p&gt;

&lt;p&gt;–asexplicit&lt;/p&gt;

&lt;p&gt;精确安装软件;换句话说，就是假定该软件包安装的原因是精确安装。如果想把一个依赖标记成精确安装，使它不会在执行带–recursive（递归）的移除命令时删除，这时候，这个命令选项就十分有用了。&lt;/p&gt;

&lt;p&gt;-b, –dbpath &lt;路径&gt;   指定另外的数据库位置;默认为/var/lib/pacman，路径为绝对路径。&lt;/路径&gt;&lt;/p&gt;

&lt;p&gt;-d, –nodeps            略过所有依赖关系检查-&lt;/p&gt;

&lt;p&gt;-f, –force               强制安装，覆盖存在冲突的文件（谨慎使用）;&lt;/p&gt;

&lt;p&gt;-r， –root &lt;路径&gt;    指定其他的根路径;用于向暂时挂载的其他系统根路径安装软件。&lt;/路径&gt;&lt;/p&gt;

&lt;p&gt;-v, –verbose          输出路径，例如根路径，配置文件，数据库，缓存的路径等。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; –cachedir &amp;lt;dir&amp;gt; 指定其他缓存路径;默认为/var/cache/pacman/pkg，路径为绝对路径。

 –config &amp;lt;路径&amp;gt;  指定另外的配置文件

 –logfile &amp;lt;路径&amp;gt; 指定另外的日志文件

 –noconfirm      不询问确认

 –noprogressbar  下载文件时不显示进度条

 –noscriptlet    不执行安装脚本集（谨慎使用）;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询选项&lt;/p&gt;

&lt;p&gt;-c, –changelog      查看某软件包的更新日志&lt;/p&gt;

&lt;p&gt;-d, –deps           列出所有作为依赖关系安装的软件包&lt;/p&gt;

&lt;p&gt;-e, –explicit       列出所有单独指定安装的软件包&lt;/p&gt;

&lt;p&gt;-g, –groups         查看某软件包组所属的所有软件包&lt;/p&gt;

&lt;p&gt;-i, –info           查看软件包信息（-ii 查看备份文件）&lt;/p&gt;

&lt;p&gt;-l, –list           列出被查询软件包的内容&lt;/p&gt;

&lt;p&gt;-m, –foreign        列出没有在同步数据库时找到的已安装软件包&lt;/p&gt;

&lt;p&gt;-o, –owns &lt;文件&gt;     查询哪个软件包拥有  &lt;文件&gt;&lt;/文件&gt;&lt;/文件&gt;&lt;/p&gt;

&lt;p&gt;-p, –file &lt;软件包&gt;   从某个软件包而不是数据库查询&lt;/软件包&gt;&lt;/p&gt;

&lt;p&gt;-q, –quiet          在查询或搜索时显示较少的信息&lt;/p&gt;

&lt;p&gt;-s, –search &lt;regex&gt; 搜寻符合指定字符串的已安装本地的软件包&lt;/regex&gt;&lt;/p&gt;

&lt;p&gt;-t, –unrequired     列出所有不被其他软件包要求的软件包&lt;/p&gt;

&lt;p&gt;-u, –upgrades       列出所有可升级的软件包&lt;/p&gt;

&lt;p&gt;-p，–file           在命令行标记软件包为文件，而不是数据库信息条目，在与–info和–list搭配时有用。&lt;/p&gt;

&lt;p&gt;移除选项&lt;/p&gt;

&lt;p&gt;-c, –cascade        删除软件包及所有的依赖于此的软件包&lt;/p&gt;

&lt;p&gt;-k, –dbonly         只删除数据库记录，不删除文件&lt;/p&gt;

&lt;p&gt;-n, –nosave         同时删除配置文件&lt;/p&gt;

&lt;p&gt;-s, –recursive      同时删除（不会破坏其他软件包的）依赖关系&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                   (-ss·也包括单独指定安装的依赖关系)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;-u, –unneeded       同时删除不需要的（且不会破坏其他软件包的）依赖关系&lt;/p&gt;

&lt;p&gt;同步选项&lt;/p&gt;

&lt;p&gt;-c, –clean          从缓存目录中删除旧软件包（-cc 清除所有）&lt;/p&gt;

&lt;p&gt;-g, –groups         查看某软件包组所属的所有软件包&lt;/p&gt;

&lt;p&gt;-i, –info           查看软件包信息&lt;/p&gt;

&lt;p&gt;-l, –list &lt;软件仓库&gt;    查看在该软件仓库中的软件包清单&lt;/软件仓库&gt;&lt;/p&gt;

&lt;p&gt;-q, –quiet          在查询或搜索时显示较少的信息&lt;/p&gt;

&lt;p&gt;-p, –print-uris     打印指定软件包及依赖关系中的URI&lt;/p&gt;

&lt;p&gt;-s, –search &lt;regex表达式&gt; 按照指定字符串查询远端软件仓库&lt;/regex表达式&gt;&lt;/p&gt;

&lt;p&gt;-u, –sysupgrade     升级所有过期软件包&lt;/p&gt;

&lt;p&gt;-w, –downloadonly   下载但不安装/升级软件包&lt;/p&gt;

&lt;p&gt;-y, –refresh        从服务器下载新的软件包数据库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  –needed         不重新安装已经为最新的软件包

  –ignore &amp;lt;软件包&amp;gt;   升级时忽略某个软件包（可多次使用）

  –ignoregroup &amp;lt;软件包组&amp;gt;

                     升级时忽略某个软件包组（可多次使用）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>zjgcjy</name></author><category term="pacman" /><summary type="html">pacman 手册 archlinux pacman 命令 arch wiki pacman -Sy 仅同步源 pacman -Syu 同步源，并更新系统 pacman -Su –ignore foo 升级时不升级包foo pacman -S abc 从本地数据库中得到abc的信息，下载安装abc包 pacman -Sy abc 和源同步后安装名为abc的包 pacman -Sd abc 忽略依赖性问题，安装包abc pacman -Sf abc 强制安装包abc pacman -Si abc 从数据库中搜索包abc的信息 pacman -Ss abc 搜索有关abc信息的包 pacman -Sg abc 查询abc这个包组包含的软件包 pacman -Sw abc 下载包而不安装它 pacman -R abc 删除abc包 pacman -Rc abc 删除abc包和依赖abc的包 pacman -Rsn abc 删除包所有不需要的依赖包并删除其配置文件 pacman -Rscn abc 删除abc包所有不需要的依赖包和依赖abd的包并删除其配置文件 pacman -Sc 清理/var/cache/pacman/pkg目录下的旧包 pacman -Scc 清除所有下载的包和数据库 pacman -Q 列出系统中所有的包 pacman -Q package 在本地包数据库搜索(查询)指定软件包 pacman -Qi package 在本地包数据库搜索(查询)指定软件包并列出相关信息 pacman -Q wc -l 统计当前系统中的包数量 pacman -Qdt 找出孤立包 pacman -Rns $(pacman -Qtdq) 删除孤立软件包（递归的,小心用) pacman -U abc.pkg.tar.gz 安装下载的abs包，或新编译的本地abc包 pacman-optimize &amp;amp;&amp;amp; sync 提高数据库访问速度 ==== 提高pacman数据访问 ==== pacman-optimize &amp;amp;&amp;amp; sync ==== 使用wget ==== 修改/etc/pacman.conf并在其中的[options] XferCommand = /usr/bin/wget -c –passive-ftp -c %u 来自：http://www.douban.com/group/topic/17909752/ Pacman手册 名称 pacman – 软件包管理器 句法 pacman [选项] [软件包名称] 描述 pacman是linux系统上的用于记录安装的软件包信息的管理器。它的主要特点有：支持依赖、软件包组、安装卸载关联以及与远程服务器同步信息然后更新系统。pacman的软件包格式是.tar.gz的压缩格式。 3.0.0版以来，pacman一直是linkman:libalpm（即”Arch Linux软件包管理“函数库）的前端。这个函数库支持不同写法的前端（例如，它支持图形化前端）。 命令 -Q，–query 查询 查询软件包数据库。运用这条命令你不仅可以查看已安装软件包以及所含文件的信息，还可以查看独立软件包的元信息（meta-information）（包括软件包的依赖，冲突，安装日期，创建日期，大小）。这条命令可已对本机的软件包数据库执行，也可以对独立的.tar.gz包执行。具体参看下面的查询选项。 -R, –remove 移除 从系统中移除某个软件包。该命令也可以对软件包组执行，执行后，软件包组内所有的软件包都会被移除。属于指定软件包的文件会被删除，而后软件包数据库会执行更新。除非加上–nosave(不保存)选项，移除软件包的配置文件都会以.pacsave的后缀保存。具体参看下面的移除选项。 -S, –sync 同步 同步软件包。软件包是从frp服务器上直接下载安装的，与之一同安装的还有运行软件所需的所有依赖。例如，pacman -S qt 会下载并安装qt以及qt的所有依赖。如果同一名称的软件包存在与不同的源中，可以指定源：pacman -S testing/qt。同样也可以给定版本要求：pacman -S “bash&amp;gt;=3.2”（引号是必需的，否则设shell会将“&amp;gt;”理解为重定向）。 可以指定软件包，也可以指定软件包组。例如，如果gnome是一个已定义的软件包组，那么执行pacman -S gnome就会将gnome组中所有的软件包安装，当然也会安装这些软件包的依赖。 pacman也可以处理一些具有相同或相近作用的软件包。例如，执行pacman -S foo，pacman首先会搜索名为foo的软件包。如果没有找到的话，pacman就会搜索一些具有相同或相近作用的软件包。如果找到了具有相同或相近作用的软件包，这些软件包就会被安装。 你也可以用pacman -Su来升级本机上所有陈旧的软件包升级是这样进行的：pacman先将本机上的软件包同远程服务器上的软件包进行版本对比。版本对比是按照如下规则进行的： 字母顺序： 1.0a&amp;lt;1.0alpha&amp;lt;1.0b&amp;lt;1.0beta&amp;lt;1.0p&amp;lt;1.0pre&amp;lt;1.0rc&amp;lt;1.0 数字顺序： 1&amp;lt;1.0&amp;lt;1.1&amp;lt;1.1.1&amp;lt;1.2&amp;lt;2.0&amp;lt;3.0.0 -U, –update 升级软件包，或安装软件包。可以给定一个URL网址，也可以给定一个文件路径。升级的过程是一个“移除，然后安装”的过程。想知道pacman如何处理配置文件，请查看处理配置文件 -V, –version 版本 显示版本，然后退出。 -h， –help 帮助 显示给定命令的句法。如果没有给定命令，显示的将是全部命令的句法。 通用选项 –asdeps [as dependency(作为依赖)] 模糊安装软件包;换句话说，就是假定该软件包安装的原因是由于依赖。在使用makepkg以及其他从源代码编译的工具时，需要在编译一个软件包之前安装该软件包的依赖，这时候，这个命令选项就十分有用了。 –asexplicit 精确安装软件;换句话说，就是假定该软件包安装的原因是精确安装。如果想把一个依赖标记成精确安装，使它不会在执行带–recursive（递归）的移除命令时删除，这时候，这个命令选项就十分有用了。 -b, –dbpath 指定另外的数据库位置;默认为/var/lib/pacman，路径为绝对路径。 -d, –nodeps 略过所有依赖关系检查- -f, –force 强制安装，覆盖存在冲突的文件（谨慎使用）; -r， –root 指定其他的根路径;用于向暂时挂载的其他系统根路径安装软件。 -v, –verbose 输出路径，例如根路径，配置文件，数据库，缓存的路径等。 –cachedir &amp;lt;dir&amp;gt; 指定其他缓存路径;默认为/var/cache/pacman/pkg，路径为绝对路径。 –config &amp;lt;路径&amp;gt; 指定另外的配置文件 –logfile &amp;lt;路径&amp;gt; 指定另外的日志文件 –noconfirm 不询问确认 –noprogressbar 下载文件时不显示进度条 –noscriptlet 不执行安装脚本集（谨慎使用）; 查询选项 -c, –changelog 查看某软件包的更新日志 -d, –deps 列出所有作为依赖关系安装的软件包 -e, –explicit 列出所有单独指定安装的软件包 -g, –groups 查看某软件包组所属的所有软件包 -i, –info 查看软件包信息（-ii 查看备份文件） -l, –list 列出被查询软件包的内容 -m, –foreign 列出没有在同步数据库时找到的已安装软件包 -o, –owns 查询哪个软件包拥有 -p, –file 从某个软件包而不是数据库查询 -q, –quiet 在查询或搜索时显示较少的信息 -s, –search 搜寻符合指定字符串的已安装本地的软件包 -t, –unrequired 列出所有不被其他软件包要求的软件包 -u, –upgrades 列出所有可升级的软件包 -p，–file 在命令行标记软件包为文件，而不是数据库信息条目，在与–info和–list搭配时有用。 移除选项 -c, –cascade 删除软件包及所有的依赖于此的软件包 -k, –dbonly 只删除数据库记录，不删除文件 -n, –nosave 同时删除配置文件 -s, –recursive 同时删除（不会破坏其他软件包的）依赖关系 (-ss·也包括单独指定安装的依赖关系) -u, –unneeded 同时删除不需要的（且不会破坏其他软件包的）依赖关系 同步选项 -c, –clean 从缓存目录中删除旧软件包（-cc 清除所有） -g, –groups 查看某软件包组所属的所有软件包 -i, –info 查看软件包信息 -l, –list 查看在该软件仓库中的软件包清单 -q, –quiet 在查询或搜索时显示较少的信息 -p, –print-uris 打印指定软件包及依赖关系中的URI -s, –search 按照指定字符串查询远端软件仓库 -u, –sysupgrade 升级所有过期软件包 -w, –downloadonly 下载但不安装/升级软件包 -y, –refresh 从服务器下载新的软件包数据库 –needed 不重新安装已经为最新的软件包 –ignore &amp;lt;软件包&amp;gt; 升级时忽略某个软件包（可多次使用） –ignoregroup &amp;lt;软件包组&amp;gt; 升级时忽略某个软件包组（可多次使用）</summary></entry><entry><title type="html">十月日记</title><link href="https://zjgcjy.github.io/posts/2019-10/%E5%8D%81%E6%9C%88%E6%97%A5%E8%AE%B0.html" rel="alternate" type="text/html" title="十月日记" /><published>2019-10-02T21:15:00+08:00</published><updated>2019-10-02T21:15:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-10/%E5%8D%81%E6%9C%88%E6%97%A5%E8%AE%B0</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-10/%E5%8D%81%E6%9C%88%E6%97%A5%E8%AE%B0.html">&lt;blockquote&gt;
  &lt;p&gt;每日所作所得&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;10月1日&quot;&gt;10月1日&lt;/h1&gt;

&lt;p&gt;周日，上课前最后一天，算是给自己放了最后一天假期&lt;/p&gt;

&lt;h1 id=&quot;10月2日&quot;&gt;10月2日&lt;/h1&gt;

&lt;p&gt;上了第一天的课，主要是os，一脸蒙蔽。&lt;/p&gt;</content><author><name>zjgcjy</name></author><category term="日记" /><summary type="html">每日所作所得 10月1日 周日，上课前最后一天，算是给自己放了最后一天假期 10月2日 上了第一天的课，主要是os，一脸蒙蔽。</summary></entry><entry><title type="html">Anti Antivirus Technology Offensive And Defensive Notes 1</title><link href="https://zjgcjy.github.io/posts/2019-08/Anti-AntiVirus-Technology-Offensive-and-Defensive-Notes-1.html" rel="alternate" type="text/html" title="Anti Antivirus Technology Offensive And Defensive Notes 1" /><published>2019-08-08T16:14:00+08:00</published><updated>2019-08-08T16:14:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-08/Anti-AntiVirus-Technology-Offensive-and-Defensive-Notes-1</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-08/Anti-AntiVirus-Technology-Offensive-and-Defensive-Notes-1.html">&lt;blockquote&gt;
  &lt;p&gt;黑客免杀攻防读书笔记&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;第一章&quot;&gt;第一章&lt;/h1&gt;

&lt;p&gt;免杀不只是特征码，所谓特征码就是病毒或木马所特有的一段二进制代码，杀毒软件所用的特征码是异常复杂的，通常包括数据特征片段和一定的逻辑判断机制组合而成。&lt;/p&gt;

&lt;p&gt;关于免杀的分类，主要分为三种。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;行为免杀，通过控制病毒木马的行为来躲过杀毒软件的检测，用到的技术之一就是Rootkit。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于杀毒软件的发展，其中之一是注重其功能性，加入人工智能和云计算等技术思想；另一类是脱离系统，向硬件靠拢，将后门安装在BIOS中，实现小型化和精确化。&lt;/p&gt;

&lt;h1 id=&quot;第二章&quot;&gt;第二章&lt;/h1&gt;

&lt;p&gt;免杀的相关基础知识，&lt;/p&gt;</content><author><name>zjgcjy</name></author><category term="免杀" /><summary type="html">黑客免杀攻防读书笔记 第一章 免杀不只是特征码，所谓特征码就是病毒或木马所特有的一段二进制代码，杀毒软件所用的特征码是异常复杂的，通常包括数据特征片段和一定的逻辑判断机制组合而成。 关于免杀的分类，主要分为三种。 行为免杀，通过控制病毒木马的行为来躲过杀毒软件的检测，用到的技术之一就是Rootkit。 关于杀毒软件的发展，其中之一是注重其功能性，加入人工智能和云计算等技术思想；另一类是脱离系统，向硬件靠拢，将后门安装在BIOS中，实现小型化和精确化。 第二章 免杀的相关基础知识，</summary></entry><entry><title type="html">八月日记</title><link href="https://zjgcjy.github.io/posts/2019-08/%E5%85%AB%E6%9C%88%E6%97%A5%E8%AE%B0.html" rel="alternate" type="text/html" title="八月日记" /><published>2019-08-01T09:35:00+08:00</published><updated>2019-08-01T09:35:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-08/%E5%85%AB%E6%9C%88%E6%97%A5%E8%AE%B0</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-08/%E5%85%AB%E6%9C%88%E6%97%A5%E8%AE%B0.html">&lt;blockquote&gt;
  &lt;p&gt;每日所作所得&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;8月1日&quot;&gt;8月1日&lt;/h1&gt;

&lt;p&gt;上午和学姐讨论，准备支持学姐的工作，讨论下接下来应该做什么。
下午电脑在更新，更新了半天。。。
然后晚上取打球了，回来之后vm打不开了，win10更新了sandbox和docker以及wsl2，环境又崩了。无语，在弄环境。&lt;/p&gt;

&lt;h1 id=&quot;8月2日&quot;&gt;8月2日&lt;/h1&gt;

&lt;p&gt;上午继续装环境，然后10点多又和学姐讨论了接下来的工作，也和黄老师聊了下自己的方向和接下来的进展。下午系统更新了，hyper -v虚拟化是真的垃圾，不好用啊，花了好长时间才卸载完。&lt;/p&gt;

&lt;h1 id=&quot;8月3日&quot;&gt;8月3日&lt;/h1&gt;

&lt;p&gt;周六，今天有xctf的比赛，看了一下，简单做了一个逆向和一个misc。下午看了后面2个逆向，不想做了，状态不怎么好，感冒很不舒服。
晚上把外面位置都打扫了一边，开始把东西搬出来。&lt;/p&gt;

&lt;h1 id=&quot;8月4日&quot;&gt;8月4日&lt;/h1&gt;

&lt;p&gt;一直在忙着搬东西，下午才弄好。然后开始配网络，试了好久就是不能配ipv6，很烦。
快到晚上的时候才弄出来，用了2个路由器，第一个当中继，第二个做路由器，结果还行。&lt;/p&gt;

&lt;h1 id=&quot;8月5日&quot;&gt;8月5日&lt;/h1&gt;

&lt;p&gt;上午开了组会，确定了这周要弄的东西，我自己也开始准备搞学姐的实验了。下午首先去试了一个样例的运行结果，遇到一些问题，和学姐讨论了。
下午主要攻克编译链接的问题，编译老是有问题，最后是安装好了vs2005下的masm32的，实现了编译的过程。晚上把脚本写好了，对20000个程序进行编译。&lt;/p&gt;

&lt;h1 id=&quot;8月6日&quot;&gt;8月6日&lt;/h1&gt;

&lt;p&gt;昨天晚上走的时候看见编译结果了，大约有6000多个编译失败了，走的时候开了日志重新编译。
今天早上去看了一下，发现是测试指令的问题，暂时没有解决办法，所以先写个脚本把这些有问题的单独抽出来吧。然后改了编译指令，重新再编译一次。
中午重新修改了脚本，最后得到5811个样例测试失败，筛出来后，大致看了下指令的分类，主要是一些奇怪的指令不能通过编译。
下午收到邮件说服务器被重置了，不明觉厉，ss需要重启一下，我晕。
晚上下定决定买了surface pro 6 i5+8+256。心疼，等到了再买配件好了。&lt;/p&gt;

&lt;h1 id=&quot;8月7日&quot;&gt;8月7日&lt;/h1&gt;

&lt;p&gt;上午基本没干嘛，效率有点低。
中午开始编译批量编译用的框架并开始测试windbg用的脚本，希望一切顺利吧。
不顺利，进行重命名的批量化工作。下午把批量化命名的工作都做完了，重新装了windbg，配好了调试环境，晚上准备写脚本然后进行自动化获取。
在如何进行批量执行的过程中，遇到的问题有：windbg脚本学习问题，windbg命令执行失败的问题（最后也没解决，但是能取巧）Unicode环境下宽字节处理问题，ShellExecute异步执行的问题。
整理了一下，好像没什么问题，准备去跑18000个了。&lt;/p&gt;

&lt;h1 id=&quot;8月8日&quot;&gt;8月8日&lt;/h1&gt;

&lt;p&gt;早上过来看了结果，服了，只编译了2329个，这是真的慢。日志显示凌晨5点就停了，不知道为啥。
为了批量执行同时控制区间，上午重新修改了starter的脚本，然后准备去测试。
下午就等他自动跑完所有的测试样例就行了，然后每过一会去看下有没有什么问题。
黄老师让我帮他调研源代码级的免杀资料，好吧，借这个机会把那本书看一下。
去看了在跑的程序，跑到2点多就停了，后来又试了几个，确实跑不起来，调试了一下，我醉了，抛出了异常，由于之前没有改名，找不到源代码，这里是我失策了。去整理了下做的东西，然后开始重新编译生成文件，吃完饭回来重新批量执行。&lt;/p&gt;

&lt;h1 id=&quot;8月9日&quot;&gt;8月9日&lt;/h1&gt;

&lt;p&gt;今天上午来看了执行结果，结果发现有很多有问题，然后重新修改了代码，采用了一个取巧的方式，直接在starter中判断当前的循环次数是不是2，如果是2就说明碰到异常，然后采取和完整测试一样的逻辑恢复控制变量。然后就等着继续跑就行了。
下午电脑到了，happy。&lt;/p&gt;

&lt;h1 id=&quot;8月10日&quot;&gt;8月10日&lt;/h1&gt;

&lt;p&gt;上午主要在装环境，测试surface，下午也是。把vs装完之后就去打球了，达到8点多，洗完澡和张翔去MacDonald，他请客哈哈。
晚上回到所里开始贴膜，爱惜我的surface。
走之前去看了学姐的实验，基本没问题，就是有2个程序卡住了，不知道为啥没断下来。暂时没仔细研究。&lt;/p&gt;

&lt;h1 id=&quot;8月11日&quot;&gt;8月11日&lt;/h1&gt;

&lt;p&gt;今天上午主要在摸鱼，然后把tpye cover和surface pen进行了测试，还是很舒服的。这两天花的钱太多了，吃土了妈的。
下午和晚上在继续装系统和虚拟机。晚上去看了机器，发现又卡住了，懵逼了，&lt;/p&gt;

&lt;h1 id=&quot;8月12日&quot;&gt;8月12日&lt;/h1&gt;

&lt;p&gt;一周总结，编译问题，windbg脚本问题，windbg程序问题，windbg命令执行失败的问题（最后也没解决，但是能取巧：运行程序名）Unicode环境下宽字节处理问题，ShellExecute异步执行的问题，程序异常的问题，修改守护进程脚本，最后编译了13601个。也成功运行记录了状态信息。
今天上午开了组会，确定了这周的任务。一是继续跑学姐的实验，二是继续调xen的环境，三是帮老师调研信息。
下午继续看学姐的实验问题，主要把测试环境给打包，方便下一步进行测试，同时和学姐讨论了下一步的工作，主要对xen进行测试，但是我试了很长时间，那台机器上的xen老是起不来东西，就很烦。
然后和学姐讨论了用我那边的机器。
晚上继续调试机器，xen上的环境怎么也装不上去，无语。&lt;/p&gt;

&lt;h1 id=&quot;8月13日&quot;&gt;8月13日&lt;/h1&gt;

&lt;p&gt;上午继续去装xen的环境，后来想想算了，直接静态编译好了，于是就搞起来了。编译完去试了发现还是不行，貌似是学姐电脑问题，就很烦。还没有试我自己的。
下午开始弄黄老师的报告，同时也继续弄学姐的环境，还去调了一下xen的问题，发现调试是真的卡，就很烦。简单用exp打了一下，发现没什么问题。晚上准备把学姐那个环境跑起来，争取能有进度，最后不停重启网络，然后xen里面可以连到外面了，设置好了之后快8点的时候开始跑起来了。
&lt;strong&gt;我要充电&lt;/strong&gt;
过了一会又去看跑的结果，发现又卡住了，服了，说什么未证明的开发者，调了IE的安全模式还是不行。还好激活了系统，最后是设置了组策略，终于弄好了。&lt;/p&gt;

&lt;h1 id=&quot;8月14日&quot;&gt;8月14日&lt;/h1&gt;

&lt;p&gt;上午回来继续看了学姐的那个实验，没啥问题，然后继续调研黄老师说的免杀技术研究，感觉调研的都不是最新的技术，不过确实免杀最近比较少了。
下午也是继续整理免杀的资料，主要是2篇文档吧，最后总结了一些东西，然后和黄老师交流了，接下来又给了新的任务。主要是black hat会议的相关内容，还要去做个实验，是ccl特征码定位的实验，好烦，论文还没看。&lt;/p&gt;

&lt;h1 id=&quot;8月15日&quot;&gt;8月15日&lt;/h1&gt;

&lt;p&gt;今天主要在打比赛，准备拿个名次的，然后上午做了一个re，又是llvm的，服了。还看了下misc的东西，无感。
下午继续做第二个re，卧槽我真是菜的不行，给了源码都看不懂，仔细分析之后才发现一个是求开平方，一个是求素数，妈耶。继续看了几个其他的misc，果然i春秋的比赛就是煞笔的不行。下午的时候，学姐xen那边的东西终于跑完了。
今天晚上回去的比较早，主要是去了趟麦当劳，然后又是中元节就想早点走了。除此以外看了免杀的书，开始弄下win的环境，好多东西没看啊，我是真的想充电，好烦啊。走的时候一叶飘零又找我去讲课，无奈又是时间冲突，去不了啊。&lt;/p&gt;

&lt;h1 id=&quot;8月16日&quot;&gt;8月16日&lt;/h1&gt;

&lt;p&gt;今天上午主要开始英语报名，然后又是接着搭建环境。我表示心很累。
下午在看免杀的东西，然后林大佬扔过来一个样本，简单分析了一下。学到了挺多东西的。我还是太菜了。&lt;/p&gt;

&lt;h1 id=&quot;8月17日&quot;&gt;8月17日&lt;/h1&gt;

&lt;p&gt;今天主要也是在打比赛，打了SUCtf的，晚上总结一下，主要还是逆向分析吧，感觉自己漏洞还是学的太少了，还有静态代码分析的功力不够，密码学的知识也不够。很伤啊。
而且今天知道宿舍是单人间改的双人间，好烦。&lt;/p&gt;

&lt;h1 id=&quot;8月18日&quot;&gt;8月18日&lt;/h1&gt;

&lt;p&gt;打比赛&lt;/p&gt;

&lt;h1 id=&quot;8月19日&quot;&gt;8月19日&lt;/h1&gt;

&lt;p&gt;今天主要开了组会，和学姐交接了相关内容，然后开始继续自己的学习工作，同时看了几个wp，整体而言效率不是很高，因为国科大分配宿舍的事情，搞得人心惶惶。&lt;/p&gt;

&lt;h1 id=&quot;8月20日&quot;&gt;8月20日&lt;/h1&gt;

&lt;p&gt;今天是周二，效率不是很高，哈哈。其实是后来忘记做了啥事情了。&lt;/p&gt;

&lt;h1 id=&quot;8月21日&quot;&gt;8月21日&lt;/h1&gt;

&lt;p&gt;今天周三，上午做了事情，下午就出去嗨了，没做多少事情。&lt;/p&gt;

&lt;h1 id=&quot;8月22日&quot;&gt;8月22日&lt;/h1&gt;

&lt;p&gt;今天是搬家的一天，一大早坐车来了雁栖湖，这是真的累。下午就在搬家然后做事情，没干什么正事。晚上去打球了，还是很舒服的，体验了一下雁栖湖的生活。&lt;/p&gt;

&lt;h1 id=&quot;8月23日&quot;&gt;8月23日&lt;/h1&gt;

&lt;p&gt;一大早就出去跑步了，然后准备今天下午的比赛。先看了巨神的题目，我想弃坑。&lt;/p&gt;

&lt;h1 id=&quot;8月24日&quot;&gt;8月24日&lt;/h1&gt;

&lt;p&gt;做了一天的比赛，比赛结束后算是打了3个题。&lt;/p&gt;

&lt;h1 id=&quot;8月25日&quot;&gt;8月25日&lt;/h1&gt;

&lt;p&gt;打比赛，oppo的，做了一个压缩算法的题，lz77？没搞出来。后来做了一个nsis的程序逆向，学到了新知识。&lt;/p&gt;

&lt;h1 id=&quot;8月26日&quot;&gt;8月26日&lt;/h1&gt;

&lt;p&gt;做了m4x大哥出的题目，然后晚上去打球了，回来把衣服也洗完了。&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;</content><author><name>zjgcjy</name></author><category term="日记" /><summary type="html">每日所作所得 8月1日 上午和学姐讨论，准备支持学姐的工作，讨论下接下来应该做什么。 下午电脑在更新，更新了半天。。。 然后晚上取打球了，回来之后vm打不开了，win10更新了sandbox和docker以及wsl2，环境又崩了。无语，在弄环境。 8月2日 上午继续装环境，然后10点多又和学姐讨论了接下来的工作，也和黄老师聊了下自己的方向和接下来的进展。下午系统更新了，hyper -v虚拟化是真的垃圾，不好用啊，花了好长时间才卸载完。 8月3日 周六，今天有xctf的比赛，看了一下，简单做了一个逆向和一个misc。下午看了后面2个逆向，不想做了，状态不怎么好，感冒很不舒服。 晚上把外面位置都打扫了一边，开始把东西搬出来。 8月4日 一直在忙着搬东西，下午才弄好。然后开始配网络，试了好久就是不能配ipv6，很烦。 快到晚上的时候才弄出来，用了2个路由器，第一个当中继，第二个做路由器，结果还行。 8月5日 上午开了组会，确定了这周要弄的东西，我自己也开始准备搞学姐的实验了。下午首先去试了一个样例的运行结果，遇到一些问题，和学姐讨论了。 下午主要攻克编译链接的问题，编译老是有问题，最后是安装好了vs2005下的masm32的，实现了编译的过程。晚上把脚本写好了，对20000个程序进行编译。 8月6日 昨天晚上走的时候看见编译结果了，大约有6000多个编译失败了，走的时候开了日志重新编译。 今天早上去看了一下，发现是测试指令的问题，暂时没有解决办法，所以先写个脚本把这些有问题的单独抽出来吧。然后改了编译指令，重新再编译一次。 中午重新修改了脚本，最后得到5811个样例测试失败，筛出来后，大致看了下指令的分类，主要是一些奇怪的指令不能通过编译。 下午收到邮件说服务器被重置了，不明觉厉，ss需要重启一下，我晕。 晚上下定决定买了surface pro 6 i5+8+256。心疼，等到了再买配件好了。 8月7日 上午基本没干嘛，效率有点低。 中午开始编译批量编译用的框架并开始测试windbg用的脚本，希望一切顺利吧。 不顺利，进行重命名的批量化工作。下午把批量化命名的工作都做完了，重新装了windbg，配好了调试环境，晚上准备写脚本然后进行自动化获取。 在如何进行批量执行的过程中，遇到的问题有：windbg脚本学习问题，windbg命令执行失败的问题（最后也没解决，但是能取巧）Unicode环境下宽字节处理问题，ShellExecute异步执行的问题。 整理了一下，好像没什么问题，准备去跑18000个了。 8月8日 早上过来看了结果，服了，只编译了2329个，这是真的慢。日志显示凌晨5点就停了，不知道为啥。 为了批量执行同时控制区间，上午重新修改了starter的脚本，然后准备去测试。 下午就等他自动跑完所有的测试样例就行了，然后每过一会去看下有没有什么问题。 黄老师让我帮他调研源代码级的免杀资料，好吧，借这个机会把那本书看一下。 去看了在跑的程序，跑到2点多就停了，后来又试了几个，确实跑不起来，调试了一下，我醉了，抛出了异常，由于之前没有改名，找不到源代码，这里是我失策了。去整理了下做的东西，然后开始重新编译生成文件，吃完饭回来重新批量执行。 8月9日 今天上午来看了执行结果，结果发现有很多有问题，然后重新修改了代码，采用了一个取巧的方式，直接在starter中判断当前的循环次数是不是2，如果是2就说明碰到异常，然后采取和完整测试一样的逻辑恢复控制变量。然后就等着继续跑就行了。 下午电脑到了，happy。 8月10日 上午主要在装环境，测试surface，下午也是。把vs装完之后就去打球了，达到8点多，洗完澡和张翔去MacDonald，他请客哈哈。 晚上回到所里开始贴膜，爱惜我的surface。 走之前去看了学姐的实验，基本没问题，就是有2个程序卡住了，不知道为啥没断下来。暂时没仔细研究。 8月11日 今天上午主要在摸鱼，然后把tpye cover和surface pen进行了测试，还是很舒服的。这两天花的钱太多了，吃土了妈的。 下午和晚上在继续装系统和虚拟机。晚上去看了机器，发现又卡住了，懵逼了， 8月12日 一周总结，编译问题，windbg脚本问题，windbg程序问题，windbg命令执行失败的问题（最后也没解决，但是能取巧：运行程序名）Unicode环境下宽字节处理问题，ShellExecute异步执行的问题，程序异常的问题，修改守护进程脚本，最后编译了13601个。也成功运行记录了状态信息。 今天上午开了组会，确定了这周的任务。一是继续跑学姐的实验，二是继续调xen的环境，三是帮老师调研信息。 下午继续看学姐的实验问题，主要把测试环境给打包，方便下一步进行测试，同时和学姐讨论了下一步的工作，主要对xen进行测试，但是我试了很长时间，那台机器上的xen老是起不来东西，就很烦。 然后和学姐讨论了用我那边的机器。 晚上继续调试机器，xen上的环境怎么也装不上去，无语。 8月13日 上午继续去装xen的环境，后来想想算了，直接静态编译好了，于是就搞起来了。编译完去试了发现还是不行，貌似是学姐电脑问题，就很烦。还没有试我自己的。 下午开始弄黄老师的报告，同时也继续弄学姐的环境，还去调了一下xen的问题，发现调试是真的卡，就很烦。简单用exp打了一下，发现没什么问题。晚上准备把学姐那个环境跑起来，争取能有进度，最后不停重启网络，然后xen里面可以连到外面了，设置好了之后快8点的时候开始跑起来了。 我要充电 过了一会又去看跑的结果，发现又卡住了，服了，说什么未证明的开发者，调了IE的安全模式还是不行。还好激活了系统，最后是设置了组策略，终于弄好了。 8月14日 上午回来继续看了学姐的那个实验，没啥问题，然后继续调研黄老师说的免杀技术研究，感觉调研的都不是最新的技术，不过确实免杀最近比较少了。 下午也是继续整理免杀的资料，主要是2篇文档吧，最后总结了一些东西，然后和黄老师交流了，接下来又给了新的任务。主要是black hat会议的相关内容，还要去做个实验，是ccl特征码定位的实验，好烦，论文还没看。 8月15日 今天主要在打比赛，准备拿个名次的，然后上午做了一个re，又是llvm的，服了。还看了下misc的东西，无感。 下午继续做第二个re，卧槽我真是菜的不行，给了源码都看不懂，仔细分析之后才发现一个是求开平方，一个是求素数，妈耶。继续看了几个其他的misc，果然i春秋的比赛就是煞笔的不行。下午的时候，学姐xen那边的东西终于跑完了。 今天晚上回去的比较早，主要是去了趟麦当劳，然后又是中元节就想早点走了。除此以外看了免杀的书，开始弄下win的环境，好多东西没看啊，我是真的想充电，好烦啊。走的时候一叶飘零又找我去讲课，无奈又是时间冲突，去不了啊。 8月16日 今天上午主要开始英语报名，然后又是接着搭建环境。我表示心很累。 下午在看免杀的东西，然后林大佬扔过来一个样本，简单分析了一下。学到了挺多东西的。我还是太菜了。 8月17日 今天主要也是在打比赛，打了SUCtf的，晚上总结一下，主要还是逆向分析吧，感觉自己漏洞还是学的太少了，还有静态代码分析的功力不够，密码学的知识也不够。很伤啊。 而且今天知道宿舍是单人间改的双人间，好烦。 8月18日 打比赛 8月19日 今天主要开了组会，和学姐交接了相关内容，然后开始继续自己的学习工作，同时看了几个wp，整体而言效率不是很高，因为国科大分配宿舍的事情，搞得人心惶惶。 8月20日 今天是周二，效率不是很高，哈哈。其实是后来忘记做了啥事情了。 8月21日 今天周三，上午做了事情，下午就出去嗨了，没做多少事情。 8月22日 今天是搬家的一天，一大早坐车来了雁栖湖，这是真的累。下午就在搬家然后做事情，没干什么正事。晚上去打球了，还是很舒服的，体验了一下雁栖湖的生活。 8月23日 一大早就出去跑步了，然后准备今天下午的比赛。先看了巨神的题目，我想弃坑。 8月24日 做了一天的比赛，比赛结束后算是打了3个题。 8月25日 打比赛，oppo的，做了一个压缩算法的题，lz77？没搞出来。后来做了一个nsis的程序逆向，学到了新知识。 8月26日 做了m4x大哥出的题目，然后晚上去打球了，回来把衣服也洗完了。 #</summary></entry><entry><title type="html">Cpp Prime Plus Learning3</title><link href="https://zjgcjy.github.io/posts/2019-07/CPP-Prime-Plus-Learning3.html" rel="alternate" type="text/html" title="Cpp Prime Plus Learning3" /><published>2019-07-29T19:15:00+08:00</published><updated>2019-07-29T19:15:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-07/CPP-Prime-Plus-Learning3</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-07/CPP-Prime-Plus-Learning3.html">&lt;blockquote&gt;
  &lt;p&gt;C++ Prime Plus 读书笔记3
第7章到第8章 主要是函数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;函数&quot;&gt;函数&lt;/h1&gt;

&lt;p&gt;C++规定函数的返回值不能是数组。函数原型不需要提供变量名。如果不指定参数列表，应该使用省略号。如果参数不满足原型要求，会自动进行强制类型转换，如果有函数重载则会有二义性。&lt;/p&gt;

&lt;h1 id=&quot;函数和数组&quot;&gt;函数和数组&lt;/h1&gt;

&lt;p&gt;数组传参的基本格式如下。实际上就是指针。函数传递普通的值是变量的拷贝，但是传递数组还是原来那个数组。如果不需要修改数组，可以加上const限定符。且需要指定数组的大小，因为这不是指向整个数组的指针，如果用sizeof查看变量大小，是指针的大小4。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//int *arr的指针&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以使用基于范围来传参。一般就是首地址和首地址加数组长度作为参数传递。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于指针和const限定符，主要有2种，即常指针和指向常量的指针。在不讨论指针的情况下，可以将const数据或非const数据复制给const指针，不能将const数据赋值给非const指针。所以函数参数尽量是const。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//指向常量的指针&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//常指针&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//指向常量的常指针&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;函数和二维数组&quot;&gt;函数和二维数组&lt;/h1&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//二维数组传参方式&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意，二维数组是以行为单位创建数组，每个数组再创建一个一维数组。所以二维数组就是3个指向一维数组整体的指针，这里的n是行数。&lt;strong&gt;传参时必须指定列数。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;注意使用RAII，不要在不同的地方析构对象。&lt;/p&gt;

&lt;h1 id=&quot;函数指针&quot;&gt;函数指针&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/tp-16b/p/7860491.html&quot;&gt;浅谈数组指针、指针数组、函数指针、函数指针数组&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;函数名代表了函数的地址。&lt;/strong&gt;函数指针的申明方法：直接将对应的函数申明种函数名改成一个指针即可。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//p = &amp;amp;pam 代表函数地址&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//*p = pam 代表函数整体吧&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>zjgcjy</name></author><category term="C++" /><summary type="html">C++ Prime Plus 读书笔记3 第7章到第8章 主要是函数 函数 C++规定函数的返回值不能是数组。函数原型不需要提供变量名。如果不指定参数列表，应该使用省略号。如果参数不满足原型要求，会自动进行强制类型转换，如果有函数重载则会有二义性。 函数和数组 数组传参的基本格式如下。实际上就是指针。函数传递普通的值是变量的拷贝，但是传递数组还是原来那个数组。如果不需要修改数组，可以加上const限定符。且需要指定数组的大小，因为这不是指向整个数组的指针，如果用sizeof查看变量大小，是指针的大小4。 int sum_arr(const int arr[], int n);//int *arr的指针 也可以使用基于范围来传参。一般就是首地址和首地址加数组长度作为参数传递。 int sum_arr(const int *begin, const int *end); { const int *pt; for(pt = begin; pt != end; pt++) { ... } } 关于指针和const限定符，主要有2种，即常指针和指向常量的指针。在不讨论指针的情况下，可以将const数据或非const数据复制给const指针，不能将const数据赋值给非const指针。所以函数参数尽量是const。 const int *p = &amp;amp;x;//指向常量的指针 int *const p = &amp;amp;x;//常指针 const int* const p = &amp;amp;x;//指向常量的常指针 函数和二维数组 //二维数组传参方式 int sum(int (*arr)[4], int row); int sum(int arr[][4], int row); int total[3][4] 注意，二维数组是以行为单位创建数组，每个数组再创建一个一维数组。所以二维数组就是3个指向一维数组整体的指针，这里的n是行数。传参时必须指定列数。 注意使用RAII，不要在不同的地方析构对象。 函数指针 浅谈数组指针、指针数组、函数指针、函数指针数组 函数名代表了函数的地址。函数指针的申明方法：直接将对应的函数申明种函数名改成一个指针即可。 double pam(int); double (*p)(int); //p = &amp;amp;pam 代表函数地址 //*p = pam 代表函数整体吧</summary></entry><entry><title type="html">Vscode_configuration</title><link href="https://zjgcjy.github.io/posts/2019-07/VScode_configuration.html" rel="alternate" type="text/html" title="Vscode_configuration" /><published>2019-07-27T11:13:00+08:00</published><updated>2019-07-27T11:13:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-07/VScode_configuration</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-07/VScode_configuration.html">&lt;blockquote&gt;
  &lt;p&gt;关于Vscode的配置信息
主要是win下的C++ （wsl）以及 python 还有java（todo）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;基于wsl的c环境&quot;&gt;基于WSL的C++环境&lt;/h1&gt;

&lt;p&gt;主要是三个文件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c_cpp_properties.json&lt;/code&gt; 用来配置VScode的插件。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;task.json&lt;/code&gt; 用来设置任务，即对文件进行编译，快捷键是&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+shift+B&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; 用来设置调试信息，这里使用的是WSL的gdb。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面给出详细的配置文件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c_cpp_properties.json&lt;/code&gt;的配置如下：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wsl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;includePath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}/**&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;defines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UNICODE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_UNICODE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;__linux__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;__x86_64__&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;windowsSdkVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.0.18362.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;compilerPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/g++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;intelliSenseMode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gcc-x64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cStandard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cppStandard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;browse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}/**&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;limitSymbolsToIncludedHeaders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt;的配置如下：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(gdb) Launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cppdbg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${fileBasenameNoExtension}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stopAtEntry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;environment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;externalConsole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;MIMode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gdb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;miDebuggerPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/gdb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;setupCommands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Enable pretty-printing for gdb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-enable-pretty-printing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ignoreFailures&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pipeTransport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pipeCwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${fileDirname}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pipeProgram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;System32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bash.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pipeArgs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;debuggerPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/gdb&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;targetArchitecture&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceFileMap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;/mnt/c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${env:systemdrive}/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;/mnt/d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;/usr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;zjgcj&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;AppData&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Local&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Packages&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;LocalState&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;rootfs&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;preLaunchTask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Make cpp on Wsl&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./${fileBasenameNoExtension}&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pipeProgram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sysnative&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bash.exe&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;debuggerPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gdb -q&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;task.json&lt;/code&gt;的配置如下：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;options&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;executable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;System32&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;wsl.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Make cpp on Wsl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;g++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./${fileBasename}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;execstack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-fno-stack-protector&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-no-pie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./${fileBasenameNoExtension}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-std=c++17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./${fileBasenameNoExtension}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;isDefault&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;problemMatcher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$gcc&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;owner&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fileLocation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;relative&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceRoot}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;regexp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^(.*):(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d+):(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d+):&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;s+(warning|error):&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;s+(.*)$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;severity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;基于mscv的c环境&quot;&gt;基于MSCV的C++环境&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/heilone6688/article/details/91050508&quot;&gt;MSVC配置C/C++编译环境&lt;/a&gt;
需要注意的主要是环境变量的配置问题。还有文件编码问题，由于控制台模式是gbk编码，代码页是936（chcp命令），而vscode默认编码是utf-8，所以中文什么的输出就很烦。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c_cpp_properties.json&lt;/code&gt;的配置文件：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Win32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;includePath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}/**&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;defines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UNICODE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_UNICODE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;windowsSdkVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.0.18362.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;compilerPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.22.27905/bin/Hostx86/x86/cl.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;intelliSenseMode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msvc-x64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cStandard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cppStandard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;browse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;limitSymbolsToIncludedHeaders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt;的配置文件：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;使用&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;IntelliSense&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;了解相关属性。&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;悬停以查看现有属性的描述。&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;欲了解更多信息，请访问:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;https://go.microsoft.com/fwlink/?linkid=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;830387&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(mscv) Run&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cppvsdbg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${fileDirname}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;${fileBasenameNoExtension}.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pause&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stopAtEntry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;environment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;externalConsole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;preLaunchTask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msvc build&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(msvc) Debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cppvsdbg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${fileDirname}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;${fileBasenameNoExtension}.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stopAtEntry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;environment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;externalConsole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.json&lt;/code&gt;的配置文件：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;有关&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;tasks.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;格式的文档，请参见&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;https://go.microsoft.com/fwlink/?LinkId=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;733558&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;msvc build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Program Files (x86)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Microsoft Visual Studio&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Community&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Common7&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Tools&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;VsDevCmd.bat&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;amp;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cl.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Zi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/EHsc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Fe:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${fileDirname}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;${fileBasenameNoExtension}.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${file}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;isDefault&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;presentation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;reveal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;always&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;problemMatcher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$msCompile&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在先弄这两个吧。python也是个大头，不过先等等。&lt;/p&gt;</content><author><name>zjgcjy</name></author><category term="vscode" /><summary type="html">关于Vscode的配置信息 主要是win下的C++ （wsl）以及 python 还有java（todo） 基于WSL的C++环境 主要是三个文件。 c_cpp_properties.json 用来配置VScode的插件。 task.json 用来设置任务，即对文件进行编译，快捷键是ctrl+shift+B。 launch.json 用来设置调试信息，这里使用的是WSL的gdb。 下面给出详细的配置文件。 c_cpp_properties.json的配置如下： { &quot;configurations&quot;: [ { &quot;name&quot;: &quot;wsl&quot;, &quot;includePath&quot;: [ &quot;${workspaceFolder}/**&quot; ], &quot;defines&quot;: [ &quot;_DEBUG&quot;, &quot;UNICODE&quot;, &quot;_UNICODE&quot;, &quot;__linux__&quot;, &quot;__x86_64__&quot; ], &quot;windowsSdkVersion&quot;: &quot;10.0.18362.0&quot;, &quot;compilerPath&quot;: &quot;/usr/bin/g++&quot;, &quot;intelliSenseMode&quot;: &quot;gcc-x64&quot;, &quot;cStandard&quot;: &quot;c11&quot;, &quot;cppStandard&quot;: &quot;c++17&quot;, &quot;browse&quot;: { &quot;path&quot;: [ &quot;${workspaceFolder}/**&quot; ], &quot;limitSymbolsToIncludedHeaders&quot;: true } } ], &quot;version&quot;: 4 } launch.json的配置如下： { &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;(gdb) Launch&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;${fileBasenameNoExtension}&quot;, &quot;args&quot;: [ &quot;&quot; ], &quot;stopAtEntry&quot;: true, &quot;cwd&quot;: &quot;.&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: true, &quot;windows&quot;: { &quot;MIMode&quot;: &quot;gdb&quot;, &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;, &quot;setupCommands&quot;: [ { &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true } ] }, &quot;pipeTransport&quot;: { &quot;pipeCwd&quot;: &quot;${fileDirname}&quot;, &quot;pipeProgram&quot;: &quot;c:\\windows\\System32\\bash.exe&quot;, &quot;pipeArgs&quot;: [ &quot;-c&quot; ], &quot;debuggerPath&quot;: &quot;/usr/bin/gdb&quot; }, &quot;targetArchitecture&quot;: &quot;x64&quot;, &quot;sourceFileMap&quot;: { &quot;/mnt/c&quot;: &quot;${env:systemdrive}/&quot;, &quot;/mnt/d&quot;: &quot;d:\\&quot;, &quot;/usr&quot;: &quot;C:\\Users\\zjgcj\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\\LocalState\\rootfs\\usr\\&quot; }, &quot;preLaunchTask&quot;: &quot;Make cpp on Wsl&quot; } ] } //&quot;program&quot;: &quot;./${fileBasenameNoExtension}&quot;, //&quot;cwd&quot;: &quot;${workspaceFolder}&quot;, //&quot;pipeProgram&quot;: &quot;c:\\windows\\sysnative\\bash.exe&quot;, //&quot;debuggerPath&quot;: &quot;gdb -q&quot;, task.json的配置如下： { &quot;version&quot;: &quot;2.0.0&quot;, &quot;windows&quot;: { &quot;options&quot;: { &quot;shell&quot;: { &quot;executable&quot;: &quot;c:\\windows\\System32\\wsl.exe&quot;, &quot;args&quot;: [ &quot; &quot; ] } } }, &quot;tasks&quot;: [ { &quot;label&quot;: &quot;Make cpp on Wsl&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;g++&quot;, &quot;args&quot;: [ &quot;-g&quot;, &quot;./${fileBasename}&quot;, &quot;-z&quot;, &quot;execstack&quot;, &quot;-fno-stack-protector&quot;, &quot;-no-pie&quot;, &quot;-o&quot;, &quot;./${fileBasenameNoExtension}&quot;, &quot;-std=c++17&quot;, &quot;&amp;amp;&amp;amp;&quot;, &quot;clear&quot;, &quot;&amp;amp;&amp;amp;&quot;, &quot;./${fileBasenameNoExtension}&quot; ], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;problemMatcher&quot;: { //&quot;$gcc&quot; &quot;owner&quot;: &quot;cpp&quot;, &quot;fileLocation&quot;: [ &quot;relative&quot;, &quot;${workspaceRoot}&quot; ], &quot;pattern&quot;: { &quot;regexp&quot;: &quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;, &quot;file&quot;: 1, &quot;line&quot;: 2, &quot;column&quot;: 3, &quot;severity&quot;: 4, &quot;message&quot;: 5 } } } ] } 基于MSCV的C++环境 MSVC配置C/C++编译环境 需要注意的主要是环境变量的配置问题。还有文件编码问题，由于控制台模式是gbk编码，代码页是936（chcp命令），而vscode默认编码是utf-8，所以中文什么的输出就很烦。 c_cpp_properties.json的配置文件： { &quot;configurations&quot;: [ { &quot;name&quot;: &quot;Win32&quot;, &quot;includePath&quot;: [ &quot;${workspaceFolder}/**&quot; ], &quot;defines&quot;: [ &quot;_DEBUG&quot;, &quot;UNICODE&quot;, &quot;_UNICODE&quot; ], &quot;windowsSdkVersion&quot;: &quot;10.0.18362.0&quot;, &quot;compilerPath&quot;: &quot;C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.22.27905/bin/Hostx86/x86/cl.exe&quot;, &quot;intelliSenseMode&quot;: &quot;msvc-x64&quot;, &quot;cStandard&quot;: &quot;c11&quot;, &quot;cppStandard&quot;: &quot;c++17&quot;, &quot;browse&quot;: { &quot;limitSymbolsToIncludedHeaders&quot;: false } } ], &quot;version&quot;: 4 } launch.json的配置文件： { // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;(mscv) Run&quot;, &quot;type&quot;: &quot;cppvsdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;cmd&quot;, &quot;args&quot;: [ &quot;/C&quot;, &quot;${fileDirname}\\${fileBasenameNoExtension}.exe&quot;, &quot;&amp;amp;&quot;, &quot;pause&quot; ], &quot;stopAtEntry&quot;: false, &quot;cwd&quot;: &quot;${workspaceFolder}&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: true, &quot;preLaunchTask&quot;: &quot;msvc build&quot; }, { &quot;name&quot;: &quot;(msvc) Debug&quot;, &quot;type&quot;: &quot;cppvsdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;${fileDirname}\\${fileBasenameNoExtension}.exe&quot;, &quot;args&quot;: [], &quot;stopAtEntry&quot;: true, &quot;cwd&quot;: &quot;${workspaceFolder}&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: true } ] } tasks.json的配置文件： { // 有关 tasks.json 格式的文档，请参见 // https://go.microsoft.com/fwlink/?LinkId=733558 &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;type&quot;: &quot;shell&quot;, &quot;label&quot;: &quot;msvc build&quot;, &quot;command&quot;: &quot;\&quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\Tools\\VsDevCmd.bat\&quot;&quot;, &quot;args&quot;: [ &quot;&amp;amp;&amp;amp;&quot;, &quot;cl.exe&quot;, &quot;/Zi&quot;, &quot;/EHsc&quot;, &quot;/Fe:&quot;, &quot;${fileDirname}\\${fileBasenameNoExtension}.exe&quot;, &quot;${file}&quot; ], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;reveal&quot;: &quot;always&quot; }, &quot;problemMatcher&quot;: [ &quot;$msCompile&quot; ] } ] } 现在先弄这两个吧。python也是个大头，不过先等等。</summary></entry><entry><title type="html">Cpp Prime Plus Learning2</title><link href="https://zjgcjy.github.io/posts/2019-07/CPP-Prime-Plus-Learning2.html" rel="alternate" type="text/html" title="Cpp Prime Plus Learning2" /><published>2019-07-26T14:30:00+08:00</published><updated>2019-07-26T14:30:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-07/CPP-Prime-Plus-Learning2</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-07/CPP-Prime-Plus-Learning2.html">&lt;blockquote&gt;
  &lt;p&gt;C++ Prime Plus 读书笔记2
第4章到第6章 包括复杂数据格式，循环以及条件结构&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;数组&quot;&gt;数组&lt;/h1&gt;

&lt;p&gt;sizeof返回的是对象的大小。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(array)/sizeof(int)&lt;/code&gt;可以求数组大小。可以使用初始化列表对变量进行初始化，不设置的元素默认值是0。
当然STL提供的vectror和C++11提供的Array更好用。&lt;/p&gt;

&lt;h1 id=&quot;字符串&quot;&gt;字符串&lt;/h1&gt;

&lt;p&gt;字符串主要通过字符数组或者string类进行存储。字符数组以空字符结尾，所以长度比设置的长度小1。
直接使用双引号对字符数组进行初始化的字符串称为字符串常量。需要注意的是：&lt;strong&gt;字符串这个整体表示的是字符串的所在地址&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//字符&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//字符串&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;字符串输入的问题&quot;&gt;字符串输入的问题&lt;/h2&gt;

&lt;p&gt;用到了cin对象的2个方法，getline和get。都是读取一行，但是getline会丢弃换行符，get将保留换行符。getline的方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;cin.getline(array, len)&lt;/code&gt;，而get因为保留换行符，所以第二次输入会有换行符，这里需要处理。通常的方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;cin.get(array, len).get()&lt;/code&gt;因为get返回的还是一个cin对象。getline也是一样，可以通过连续调用来接受2个数组&lt;code class=&quot;highlighter-rouge&quot;&gt;cin.getline(array1, len1).getline(array2, len2)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;用get对程序的输入更方便处理，而getline则使用更简单。关于读取空行的读取过多的数据，getline和get的情况不太同。
空行：getline读取换行符给目标数组。
空行：get读取设置失效位，后续读取将关闭，需要通过cin.clear()开启
过长：getline保留输入序列，设置失效位，关闭输入
过长：get也保留输入序列，下一次继续读取。&lt;/p&gt;

&lt;h2 id=&quot;string类&quot;&gt;string类&lt;/h2&gt;

&lt;p&gt;使用初始化列表进行初始化。&lt;code class=&quot;highlighter-rouge&quot;&gt;string p{&quot;fsdfsd&quot;}&lt;/code&gt;
对于string类来说，如果需要读取一行，使用istream的类方法，即&lt;code class=&quot;highlighter-rouge&quot;&gt;getline(cin, str)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//各种变量初始化方法&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sdfsdfsdf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dfsdf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;aerwere&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&quot;basdfsd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;U&quot;cwgwe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于原始字符串，这种字符串中不考虑转义字符的问题。用R前缀和小括号来表示，如果需要表示括号，可以自定义标识符，R可以和u、L等一起使用。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 使用*+*记号来标记&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfsfdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R&quot;*+*(&quot;(Who wouldn't?)&quot;)*+*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R&quot;*+*(&quot;(Who wouldn't?)&quot;, she whispered.\n)*+*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;结构体&quot;&gt;结构体&lt;/h1&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;helloworld&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aaa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//直接申明变量&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;helloworld&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dfdsfd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//申明变量&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//匿名结构体&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结构体允许直接进行成员赋值，应该是设置了对应的复制构造函数。&lt;/p&gt;

&lt;p&gt;关于结构体数组的初始化方法如下:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mystruct&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;95.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;结构体中的位字段&lt;/strong&gt;这个结构说明的比较少，C++允许指定占用特有位数的结构成员，字段的类型为整形或枚举，然后是冒号，后面是数字指定了占用的位数。可以使用没有名称的字段来提供占位符。每个成员被称为位字段。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//占位符&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;good1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;good2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;共用体&quot;&gt;共用体&lt;/h1&gt;

&lt;p&gt;共用体的长度是最大成员的长度。
通常设置匿名共用体，结合结构体来表示一些特殊数据。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baudrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 匿名共用体，可以通过test.id_num直接访问对应的变量&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;枚举&quot;&gt;枚举&lt;/h1&gt;

&lt;p&gt;枚举的关键词是enum，这能创建符号常量。
枚举值能参与算术运算，但所有的值会进行整形提升，转换成int值，且不能给enum赋值，但可以通过强制类型转换进行赋值。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//匿名枚举变量&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;orange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;indigo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;puple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//可以不指定变量，即只创建符号常量，相当于const&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过强制类型转换，可以将任意值赋值给枚举变量，但是是有范围的，枚举的取值范围取决于已经初始化的值的范围，最大值是大于当前最大值的最小的2的次方减1。最小值如果初始化的值都非负，则是0，否则是小于当前最小值的最小的2的次方加1。&lt;/p&gt;

&lt;h1 id=&quot;指针&quot;&gt;指针&lt;/h1&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x12345678&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//强制指向特定地址&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数组名等价于数组的首地址。指针可以加减，但是数组名不行。
&lt;strong&gt;关于数组的地址，表述如下&lt;/strong&gt;数组名表示的是一个元素占内存的地址，数组取地址表示的是整个数组占内存块的大小。所以p是一个整形的指针，而&amp;amp;p是这样这个指针，即指向一个包含n个元素的int数组。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//和&amp;amp;p[0]等价，表示第一个元素的地址&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//整个数组的地址&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//下一个元素&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//数组结束地址&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//创建一个指向6个int元素的指针&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//整个数组大小，和&amp;amp;p等价&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//整个数组中第一个元素的地址。和p以及&amp;amp;p[0]等价&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//第一个元素&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//第二个元素的地址，和&amp;amp;p[1]等价&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//第二个元素的值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这几行反汇编的结果如下所示。伪代码很奇怪。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/Snipaste_2019-07-28_10-52-40.png&quot; alt=&quot;Snipaste_2019-07-28_10-52-40&quot; /&gt;&lt;/p&gt;

&lt;p&gt;直接上汇编代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/Snipaste_2019-07-28_10-54-59.png&quot; alt=&quot;Snipaste_2019-07-28_10-54-59&quot; /&gt;&lt;/p&gt;

&lt;p&gt;直接看汇编的话就会发现，前面2个是一样的。即pp和&amp;amp;pp，在实现是一样的。第三个多了一行mov指令，&lt;code class=&quot;highlighter-rouge&quot;&gt;mov     eax, [rax]&lt;/code&gt;所以是第一个元素。第四个多了一行&lt;code class=&quot;highlighter-rouge&quot;&gt;add     rax, 4&lt;/code&gt;，所以是取第二个元素的地址。第五个则是多了上面两行，所以是第二个元素。&lt;/p&gt;

&lt;h1 id=&quot;类型组合&quot;&gt;类型组合&lt;/h1&gt;

&lt;p&gt;主要是指针数组比较难理解。&lt;strong&gt;指针数组是数组，每一个成员都是指针，可以创建一个二级指针指向该数组&lt;/strong&gt;可以采用auto类型自动判断类型。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 结构体数组&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;helloworld&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 结构体数组访问方式&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 指针数组，指向结构体的指针&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;helloworld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//指针数组访问方式&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//二级指针，指向指针数组&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//二级指针访问方式&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//*p3表示第一个元素，同时也是指针，先解引用，得到的是&amp;amp;s1，但是+1得到的不一定是下一个元素地址，可能不连续&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//p3表示&amp;amp;p2的地址，先+1得到的是下一个元素的地址，然后解引用得到结构体地址，是正确的访问思路&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//*(*p4)[3]类型指针，指向整个指针数组&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//和&amp;amp;p2等价，整个指针数组的地址，是一个整体&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//先解引用，和p2以及&amp;amp;p2[0]等价，数组首地址，+1得到第二个元素地址&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//再一次解引用，得到第二个元素的值，就是&amp;amp;s2的值cout &amp;lt;&amp;lt; (*(*p4 + 1))-&amp;gt;year &amp;lt;&amp;lt; endl;//访问结构体的值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正确的二级指针访问的汇编代码如下所示：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;数组模板&quot;&gt;数组模板&lt;/h1&gt;

&lt;p&gt;主要是vector和array两个模板类，都定义在std命名空间中，使用需要包含相应头文件。vector存储在heap，大小可变。array存储在stack，大小不可变。array对象可以直接进行对象赋值。使用at方法可以检查index是否越界。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//vector&amp;lt;int&amp;gt; vt(5);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;for循环结构&quot;&gt;for循环结构&lt;/h1&gt;

&lt;p&gt;for循环的组成部分。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;设置初始值。&lt;/li&gt;
  &lt;li&gt;执行测试条件，判断循环是否继续。&lt;/li&gt;
  &lt;li&gt;执行循环操作。&lt;/li&gt;
  &lt;li&gt;更新值。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;声明语句表达式，关于这个概念，是指在for循环的初始化部分可以是表达式语句，也可以是声明。&lt;/p&gt;

&lt;h2 id=&quot;前缀和后缀&quot;&gt;前缀和后缀&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;前缀表达式的效率比后缀表达式的效率高&lt;/strong&gt;因为前缀函数直接运算后返回结果。而后缀首先复制一个副本，然后计算表达式，最后返回副本。
&lt;strong&gt;如果递增运算符和指针结合，需要考虑到运算符的优先级和结合顺序。前缀运算符和解引用优先级相同，从右向左结合；后缀运算符优先级更高，从左向右结合。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;关于逗号表达式：逗号表达式首先计算第一个表达式，然后计算第二个表达式。整个逗号表达式的值是最后部分的值。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//等价于(cata = 17) , 140; cata值为17&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//括号优先级最高，cata值为140&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于延时循环，使用clock函数，直接贴代码。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//#include &amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;array&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;ctime&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;clock_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 将延时秒数乘以宏，得到以系统时间为单位的时间&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;starting!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;clock_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//返回的是系统时间&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//死循环延时&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;done&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;别名&quot;&gt;别名&lt;/h2&gt;

&lt;p&gt;C++使用两种方式定义别名。分别是预处理器和typedef关键字。尽量用typedef，预处理器错误太多了。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define  BYTE1 char
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;c11循环&quot;&gt;C++11循环&lt;/h1&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.87&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//或者用引用类型，可以修改变量的值&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;循环和文本输入&quot;&gt;循环和文本输入&lt;/h1&gt;

&lt;p&gt;文件尾条件，称为EOF，操作系统都支持重定向，允许用文件替换键盘输入。比如&lt;code class=&quot;highlighter-rouge&quot;&gt;get.exe &amp;lt; test.txt&lt;/code&gt;可以将文件输入至该程序中。小于号是重定向运算符。cin对象在检测到EOF之后，设置eofbit和failbit为true。可以通过对应的成员函数cin.eof()和cin.fail()查看。所以在循环输入的时候，可以通过这个方法检测输入是否完成，这是常规的做法。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 常见的做法&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 更有效的做法&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二种如代码所示，istream类提供了一个istream对象转换成bool类型的函数，即cin可以作为while的测试条件，这比检测fail更有效，因为能检测磁盘故障等问题。鉴于get方法返回的还是cin对象，所以可以直接精简成上面的测试条件。&lt;/p&gt;

&lt;p&gt;cin.get()和cout.put()，以及getchar()和putchar()类似。在iostream中，EOF被定义为-1。可以使用cin.get()和cout.put()代替上面的函数，然后用EOF代替cin.fail()。注意cin.get()返回的是int类型的值，不是char。后面输出的时候也要强制转换。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 普通版本，g++编译其实没问题&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 更好的版本&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主要是因为两套不一样的函数，分别是cin.get(ch)和cin.get()。cin.get(ch)返回的是istream对象，即cin，可以连续读取。而cin.get()返回的是int类型的值。&lt;/p&gt;

&lt;h1 id=&quot;嵌套循环和二维数组&quot;&gt;嵌套循环和二维数组&lt;/h1&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;maxtmps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;684&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;初始化方式如上所示。&lt;/p&gt;

&lt;h1 id=&quot;分支语句&quot;&gt;分支语句&lt;/h1&gt;

&lt;p&gt;取反运算符的优先级高于所有关系运算符和算术运算符。
逻辑与运算符优先级高于逻辑或运算符。
C++保留了and、or和not关键字。&lt;/p&gt;

&lt;h1 id=&quot;cctype&quot;&gt;cctype&lt;/h1&gt;

&lt;p&gt;引入头文件cctype。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/Snipaste_2019-07-29_15-54-04.png&quot; alt=&quot;Snipaste_2019-07-29_15-54-04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中_ISbit宏如下。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# define _ISbit(bit) ((bit) &amp;lt; 8 ? ((1 &amp;lt;&amp;lt; (bit)) &amp;lt;&amp;lt; 8) : ((1 &amp;lt;&amp;lt; (bit)) &amp;gt;&amp;gt; 8))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;读取数字&quot;&gt;读取数字&lt;/h1&gt;

&lt;p&gt;如果没有正确读取到数字，变量的值将不变，输入将保留在输入流中，cin将设置错误标记，同时返回false。后续需要使用clear()方法重置错误标记。常见的做法是&lt;code class=&quot;highlighter-rouge&quot;&gt;while(cin&amp;gt;&amp;gt;x)&lt;/code&gt;通过cin对象判断输入是否成功，失败则退出，否则继续。如果失败还需要继续读取，则需要重置，设置&lt;code class=&quot;highlighter-rouge&quot;&gt;cin.clear()&lt;/code&gt;来接受新的输入，然后删除错误的输入序列，再进行新的输入。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//判断读取是否成功&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//重置输入&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//删除输入序列&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;please input&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;文件输入输出&quot;&gt;文件输入输出&lt;/h1&gt;

&lt;p&gt;这里讨论的主要是文本文件的输出。需要引入头文件fstream和ofstream类的对象，通过open和close方法进行文件输出。最后使用«输出到文件中。输入也是相同的方法，定义ifstream的对象，然后调用方法进行输入。通过good方法，能检测所有的问题，包括磁盘错误，文件受损，读取EOF，类型不匹配等等。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;fstream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//输出&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ofstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;out.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//输入&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cintext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ifstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//判断是否打开成功&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cintext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cintext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//最好的输入检测方式&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//自动调用good方法判断是否成功&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;混合输入的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;cin.getline(array, len)&lt;/code&gt;读字符串，&lt;code class=&quot;highlighter-rouge&quot;&gt;cin&amp;gt;&amp;gt;x&lt;/code&gt;读数字，然后&lt;code class=&quot;highlighter-rouge&quot;&gt;cin.get()&lt;/code&gt;读换行符。&lt;/p&gt;</content><author><name>zjgcjy</name></author><category term="C++" /><summary type="html">C++ Prime Plus 读书笔记2 第4章到第6章 包括复杂数据格式，循环以及条件结构 数组 sizeof返回的是对象的大小。使用sizeof(array)/sizeof(int)可以求数组大小。可以使用初始化列表对变量进行初始化，不设置的元素默认值是0。 当然STL提供的vectror和C++11提供的Array更好用。 字符串 字符串主要通过字符数组或者string类进行存储。字符数组以空字符结尾，所以长度比设置的长度小1。 直接使用双引号对字符数组进行初始化的字符串称为字符串常量。需要注意的是：字符串这个整体表示的是字符串的所在地址 char a = 's'; //字符 char a[] = &quot;s&quot;; //字符串 字符串输入的问题 用到了cin对象的2个方法，getline和get。都是读取一行，但是getline会丢弃换行符，get将保留换行符。getline的方法是cin.getline(array, len)，而get因为保留换行符，所以第二次输入会有换行符，这里需要处理。通常的方法是cin.get(array, len).get()因为get返回的还是一个cin对象。getline也是一样，可以通过连续调用来接受2个数组cin.getline(array1, len1).getline(array2, len2)。 用get对程序的输入更方便处理，而getline则使用更简单。关于读取空行的读取过多的数据，getline和get的情况不太同。 空行：getline读取换行符给目标数组。 空行：get读取设置失效位，后续读取将关闭，需要通过cin.clear()开启 过长：getline保留输入序列，设置失效位，关闭输入 过长：get也保留输入序列，下一次继续读取。 string类 使用初始化列表进行初始化。string p{&quot;fsdfsd&quot;} 对于string类来说，如果需要读取一行，使用istream的类方法，即getline(cin, str) //各种变量初始化方法 char p[]{&quot;sdfsdfsdf&quot;}; string aa{&quot;dfsdf&quot;}; wchar_t a[]{L&quot;aerwere&quot;}; char16_t b[]{u&quot;basdfsd&quot;}; char32_t c[]{U&quot;cwgwe&quot;}; 关于原始字符串，这种字符串中不考虑转义字符的问题。用R前缀和小括号来表示，如果需要表示括号，可以自定义标识符，R可以和u、L等一起使用。 // 使用*+*记号来标记 char dfsfdd[]{R&quot;*+*(&quot;(Who wouldn't?)&quot;)*+*&quot;}; cout&amp;lt;&amp;lt;R&quot;*+*(&quot;(Who wouldn't?)&quot;, she whispered.\n)*+*&quot;&amp;lt;&amp;lt;endl; 结构体 struct helloworld { char name[10]; int index; double grade; }aaa, *pp; //直接申明变量 helloworld x{&quot;dfdsfd&quot;,6,9.9}; //申明变量 struct //匿名结构体 { char name[20]; int index; }*ppp; 结构体允许直接进行成员赋值，应该是设置了对应的复制构造函数。 关于结构体数组的初始化方法如下: struct mystruct { char name[10]; int index; double grade; }guests[2]{ {&quot;chen&quot;, 1, 95.5}, {&quot;dong&quot;, 2, 2.6}, }; 结构体中的位字段这个结构说明的比较少，C++允许指定占用特有位数的结构成员，字段的类型为整形或枚举，然后是冒号，后面是数字指定了占用的位数。可以使用没有名称的字段来提供占位符。每个成员被称为位字段。 struct { unsigned int SN : 4; unsigned int : 4; //占位符 bool good1 : 1; bool good2 : 1; }tr{14,true,false}; 共用体 共用体的长度是最大成员的长度。 通常设置匿名共用体，结合结构体来表示一些特殊数据。 struct widget { char baudrate[10]; int type; union { // 匿名共用体，可以通过test.id_num直接访问对应的变量 long id_num; char id[20]; }; } test; 枚举 枚举的关键词是enum，这能创建符号常量。 枚举值能参与算术运算，但所有的值会进行整形提升，转换成int值，且不能给enum赋值，但可以通过强制类型转换进行赋值。 enum //匿名枚举变量 { red = 1, orange = 5, green = 8, blue = 200, indigo = 200, puple = 201, black = 300 }test; //可以不指定变量，即只创建符号常量，相当于const 通过强制类型转换，可以将任意值赋值给枚举变量，但是是有范围的，枚举的取值范围取决于已经初始化的值的范围，最大值是大于当前最大值的最小的2的次方减1。最小值如果初始化的值都非负，则是0，否则是小于当前最小值的最小的2的次方加1。 指针 int* p = (int*)0x12345678;//强制指向特定地址 数组名等价于数组的首地址。指针可以加减，但是数组名不行。 关于数组的地址，表述如下数组名表示的是一个元素占内存的地址，数组取地址表示的是整个数组占内存块的大小。所以p是一个整形的指针，而&amp;amp;p是这样这个指针，即指向一个包含n个元素的int数组。 int p[] = {1, 2, 3, 4, 5, 6}; cout &amp;lt;&amp;lt; p &amp;lt;&amp;lt; endl;//和&amp;amp;p[0]等价，表示第一个元素的地址 cout &amp;lt;&amp;lt; &amp;amp;p &amp;lt;&amp;lt; endl;//整个数组的地址 cout &amp;lt;&amp;lt; p + 1 &amp;lt;&amp;lt; endl;//下一个元素 cout &amp;lt;&amp;lt; &amp;amp;p + 1 &amp;lt;&amp;lt; endl;//数组结束地址 int(*pp)[6] = &amp;amp;p;//创建一个指向6个int元素的指针 cout &amp;lt;&amp;lt; pp &amp;lt;&amp;lt; endl;//整个数组大小，和&amp;amp;p等价 cout &amp;lt;&amp;lt; *pp &amp;lt;&amp;lt; endl;//整个数组中第一个元素的地址。和p以及&amp;amp;p[0]等价 cout &amp;lt;&amp;lt; **pp &amp;lt;&amp;lt; endl;//第一个元素 cout &amp;lt;&amp;lt; (*pp) + 1 &amp;lt;&amp;lt; endl;//第二个元素的地址，和&amp;amp;p[1]等价 cout &amp;lt;&amp;lt; *((*pp) + 1) &amp;lt;&amp;lt; endl;//第二个元素的值 上面这几行反汇编的结果如下所示。伪代码很奇怪。 直接上汇编代码。 直接看汇编的话就会发现，前面2个是一样的。即pp和&amp;amp;pp，在实现是一样的。第三个多了一行mov指令，mov eax, [rax]所以是第一个元素。第四个多了一行add rax, 4，所以是取第二个元素的地址。第五个则是多了上面两行，所以是第二个元素。 类型组合 主要是指针数组比较难理解。指针数组是数组，每一个成员都是指针，可以创建一个二级指针指向该数组可以采用auto类型自动判断类型。 // 结构体数组 helloworld p1[]{s1, s2, s3}; // 结构体数组访问方式 p1[0].year; (*(p1 + 1)).year; // 指针数组，指向结构体的指针 helloworld *p2[]{&amp;amp;s1, &amp;amp;s2, &amp;amp;s3}; //指针数组访问方式 p2[0]-&amp;gt;year; (*(p2 + 1))-&amp;gt;year; (**(p2 + 1)).year; //二级指针，指向指针数组 auto p3{p2}; //二级指针访问方式 (*p3 + 1)-&amp;gt;year;//*p3表示第一个元素，同时也是指针，先解引用，得到的是&amp;amp;s1，但是+1得到的不一定是下一个元素地址，可能不连续 (*(*p3 + 1)).year; (*(p3 + 1))-&amp;gt;year;//p3表示&amp;amp;p2的地址，先+1得到的是下一个元素的地址，然后解引用得到结构体地址，是正确的访问思路 (*(*(p3 + 1))).year; //*(*p4)[3]类型指针，指向整个指针数组 auto p4{&amp;amp;p2}; cout &amp;lt;&amp;lt; p4 &amp;lt;&amp;lt; endl;//和&amp;amp;p2等价，整个指针数组的地址，是一个整体 cout &amp;lt;&amp;lt; *p4 + 1 &amp;lt;&amp;lt; endl;//先解引用，和p2以及&amp;amp;p2[0]等价，数组首地址，+1得到第二个元素地址 cout &amp;lt;&amp;lt; *(*p4 + 1) &amp;lt;&amp;lt; endl;//再一次解引用，得到第二个元素的值，就是&amp;amp;s2的值cout &amp;lt;&amp;lt; (*(*p4 + 1))-&amp;gt;year &amp;lt;&amp;lt; endl;//访问结构体的值 正确的二级指针访问的汇编代码如下所示： mov rax, [rbp+p1] add rax, 8 mov rax, [rax] mov eax, [rax+8] 数组模板 主要是vector和array两个模板类，都定义在std命名空间中，使用需要包含相应头文件。vector存储在heap，大小可变。array存储在stack，大小不可变。array对象可以直接进行对象赋值。使用at方法可以检查index是否越界。 vector&amp;lt;int&amp;gt; vt{5, 4, 3, 2, 1}; //vector&amp;lt;int&amp;gt; vt(5); array&amp;lt;int, 5&amp;gt; ai{1, 2, 3, 4, 5}; for循环结构 for循环的组成部分。 设置初始值。 执行测试条件，判断循环是否继续。 执行循环操作。 更新值。 声明语句表达式，关于这个概念，是指在for循环的初始化部分可以是表达式语句，也可以是声明。 前缀和后缀 前缀表达式的效率比后缀表达式的效率高因为前缀函数直接运算后返回结果。而后缀首先复制一个副本，然后计算表达式，最后返回副本。 如果递增运算符和指针结合，需要考虑到运算符的优先级和结合顺序。前缀运算符和解引用优先级相同，从右向左结合；后缀运算符优先级更高，从左向右结合。 关于逗号表达式：逗号表达式首先计算第一个表达式，然后计算第二个表达式。整个逗号表达式的值是最后部分的值。 cata = 17, 140;//等价于(cata = 17) , 140; cata值为17 cata = (17, 140);//括号优先级最高，cata值为140 关于延时循环，使用clock函数，直接贴代码。 //#include &amp;lt;bits/stdc++.h&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;array&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;ctime&amp;gt; using namespace std; int main() { float secs{5.0}; clock_t delay = secs * CLOCKS_PER_SEC;// 将延时秒数乘以宏，得到以系统时间为单位的时间 cout &amp;lt;&amp;lt; &quot;starting!&quot; &amp;lt;&amp;lt; endl; clock_t start = clock();//返回的是系统时间 while (clock() - start &amp;lt; delay);//死循环延时 cout &amp;lt;&amp;lt; &quot;done&quot; &amp;lt;&amp;lt; endl; return 0; } 别名 C++使用两种方式定义别名。分别是预处理器和typedef关键字。尽量用typedef，预处理器错误太多了。 #define BYTE1 char typedef char byte1, *charptr; C++11循环 for (auto i : {4.99, 10.99, 6.87, 7.99, 8.49})//或者用引用类型，可以修改变量的值 cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl; 循环和文本输入 文件尾条件，称为EOF，操作系统都支持重定向，允许用文件替换键盘输入。比如get.exe &amp;lt; test.txt可以将文件输入至该程序中。小于号是重定向运算符。cin对象在检测到EOF之后，设置eofbit和failbit为true。可以通过对应的成员函数cin.eof()和cin.fail()查看。所以在循环输入的时候，可以通过这个方法检测输入是否完成，这是常规的做法。 char ch; cin.get(ch); while(cin.fail() == false)// 常见的做法 { cin.get(ch); } while(cin.get(ch)) // 更有效的做法 { } 第二种如代码所示，istream类提供了一个istream对象转换成bool类型的函数，即cin可以作为while的测试条件，这比检测fail更有效，因为能检测磁盘故障等问题。鉴于get方法返回的还是cin对象，所以可以直接精简成上面的测试条件。 cin.get()和cout.put()，以及getchar()和putchar()类似。在iostream中，EOF被定义为-1。可以使用cin.get()和cout.put()代替上面的函数，然后用EOF代替cin.fail()。注意cin.get()返回的是int类型的值，不是char。后面输出的时候也要强制转换。 // 普通版本，g++编译其实没问题 int ch; ch = cin.get(); while(ch != EOF) { cout.put(ch); ch = cin.get(); } // 更好的版本 int ch; while ((ch = cin.get()) != EOF) { cout.put(char(ch)); } 主要是因为两套不一样的函数，分别是cin.get(ch)和cin.get()。cin.get(ch)返回的是istream对象，即cin，可以连续读取。而cin.get()返回的是int类型的值。 嵌套循环和二维数组 int maxtmps[2][3]{ {96, 13, 58}, {23, 684, 83} }; 初始化方式如上所示。 分支语句 取反运算符的优先级高于所有关系运算符和算术运算符。 逻辑与运算符优先级高于逻辑或运算符。 C++保留了and、or和not关键字。 cctype 引入头文件cctype。 其中_ISbit宏如下。 # define _ISbit(bit) ((bit) &amp;lt; 8 ? ((1 &amp;lt;&amp;lt; (bit)) &amp;lt;&amp;lt; 8) : ((1 &amp;lt;&amp;lt; (bit)) &amp;gt;&amp;gt; 8)) 读取数字 如果没有正确读取到数字，变量的值将不变，输入将保留在输入流中，cin将设置错误标记，同时返回false。后续需要使用clear()方法重置错误标记。常见的做法是while(cin&amp;gt;&amp;gt;x)通过cin对象判断输入是否成功，失败则退出，否则继续。如果失败还需要继续读取，则需要重置，设置cin.clear()来接受新的输入，然后删除错误的输入序列，再进行新的输入。 int x; while (!(cin &amp;gt;&amp;gt; x))//判断读取是否成功 { cin.clear();//重置输入 while (cin.get() != '\n')//删除输入序列 { continue; } cout &amp;lt;&amp;lt; &quot;please input&quot; &amp;lt;&amp;lt; endl; } 文件输入输出 这里讨论的主要是文本文件的输出。需要引入头文件fstream和ofstream类的对象，通过open和close方法进行文件输出。最后使用«输出到文件中。输入也是相同的方法，定义ifstream的对象，然后调用方法进行输入。通过good方法，能检测所有的问题，包括磁盘错误，文件受损，读取EOF，类型不匹配等等。 #include &amp;lt;fstream&amp;gt; //输出 ofstream fout; fout.open(&quot;out.txt&quot;); fout &amp;lt;&amp;lt; endl; fout.close(); //输入 char cintext[50]; ifstream fin; fin.open(&quot;in.txt&quot;); if (!fin.is_open())//判断是否打开成功 { exit(EXIT_FAILURE); } fin &amp;gt;&amp;gt; cintext; fin.getline(cintext, 50); fin.close(); //最好的输入检测方式 while(fin &amp;gt;&amp;gt; value)//自动调用good方法判断是否成功 { ... } 混合输入的时候，cin.getline(array, len)读字符串，cin&amp;gt;&amp;gt;x读数字，然后cin.get()读换行符。</summary></entry><entry><title type="html">Cpp_prime_plus_learning1</title><link href="https://zjgcjy.github.io/posts/2019-07/CPP_Prime_Plus_Learning1.html" rel="alternate" type="text/html" title="Cpp_prime_plus_learning1" /><published>2019-07-24T19:24:00+08:00</published><updated>2019-07-24T19:24:00+08:00</updated><id>https://zjgcjy.github.io/posts/2019-07/CPP_Prime_Plus_Learning1</id><content type="html" xml:base="https://zjgcjy.github.io/posts/2019-07/CPP_Prime_Plus_Learning1.html">&lt;blockquote&gt;
  &lt;p&gt;C++ Prime Plus 读书笔记1
第1章到第3章 包括一些预备知识和基本数据类型和代码格式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;c简介&quot;&gt;C++简介&lt;/h1&gt;

&lt;p&gt;C++继承了C语言的优点，同时新添加了内容，包括面向对象编程（OOP）和泛型编程。&lt;/p&gt;

&lt;p&gt;关于C语言的编程原理，有这么几点。最开始是过程性语言，强调数据和算法，但是这种方式阅读起来很困难，修改也很复杂。所以逐渐发展成为结构化编程的方法，将分支限制为小组行为中的结构。另一个原则是自顶向下的原则，将大任务分解成小任务，然后各个击破。总体来看，结构化编程反应了过程性编程的思想，即通过执行的操作来构思一个程序。&lt;/p&gt;

&lt;p&gt;在OOP提出来后，这种思维强调的是数据，试图让语言来满足问题的要求，是设计与问题的本质相关的数据格式。然后设计出相应的类来表示这些数据格式，同时设置相应的方法，对数据进行操作，从低级数据操作高级数据，是一种自下向上的编程方法。OOP还有助于复用代码和信息隐藏，多态和继承能派生出新类和新的方法。&lt;/p&gt;

&lt;p&gt;泛型编程是C++支持的另一种编程模式，它强调的是独立于数据格式的任务，即模板类。&lt;/p&gt;

&lt;h1 id=&quot;创建c文件&quot;&gt;创建C++文件&lt;/h1&gt;

&lt;p&gt;如何让C++文件运行起来主要分三步，第一步是编写源代码，第二步是编译源代码，生成的代码是目标代码，也就是机器语言。但是这个时候文件还不能运行，还要进行链接，链接的过程就是将程序运行需要的库函数和标准启动函数组合起来，形成可执行代码。&lt;/p&gt;

&lt;p&gt;为了支持某些新特性，有些编译器，比如g++编译源代码的命令：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;常见的C++文件拓展名如下表所示。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;C++实现&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;拓展名&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UNIX&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;C cc cxx  c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GNU  C++&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;C cc cxx cpp c++&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Visual C++&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cpp cxx cc&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;第一章的内容其实没什么重要的东西，了解一下就行了。下面是第二章的内容。&lt;/p&gt;

&lt;h1 id=&quot;c语句&quot;&gt;C++语句&lt;/h1&gt;

&lt;p&gt;C++支持命名空间的用法，这种技术旨在编写大型程序时能将多个同名函数进行区分，有助于组织结构。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;如果只需要使用其中几个对象，可以直接这样写，上面的写法有点偷懒了。&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;也可以直接不使用命名空间。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于换行符，endl和转义字符不一样的一点在于，endl会确保程序继续运行前刷新输出缓冲区，而转义字符‘\n’则不一定，有时候不会输出，需要设置输出缓冲区的刷新模式。&lt;/p&gt;

&lt;p&gt;C++中的类指定了对象执行的所有操作。对特定对象执行这些操作，需要给对象发送消息，一般分为两种方法，第一种是使用类的方法，第二种是使用运算符重载。&lt;/p&gt;

&lt;h1 id=&quot;函数&quot;&gt;函数&lt;/h1&gt;

&lt;p&gt;在使用库函数的时候，如果找不到对应的函数，需要手动设置，如下所示。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UNIX&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Linux&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;数据&quot;&gt;数据&lt;/h1&gt;

&lt;p&gt;使用sizeof运算符可以求类型或者变量的长度。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//可以查看变量的范围&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;climits&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C++特有的初始化语法，通过新添加的大括号初始化器，初始化常规变量的形式和类变量的形式更像。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于无符号和有符号数据的范围，C++不保证符号整数的上溢和下溢。&lt;/p&gt;

&lt;p&gt;关于数据格式，如果使用标准输入输出流，以不同格式输出的方法如下。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10进制&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 16进制&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//8进制&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;整形数据格式与类型&quot;&gt;整形数据格式与类型&lt;/h1&gt;

&lt;p&gt;在整数后加l或L表示是long常量，u或U是unsigned int常量，ul或uL表示unsigned long常量，uLL表示unsigned long long常量。&lt;/p&gt;

&lt;p&gt;对于不带后缀的十进制数，使用int，long 或者long long类型。
对于不带后缀的十六进制，使用int，unsigned int，long，unsigned long，long long，unsigned long long。
这是因为十六进制经常用来表示内存地址，而地址是非负的，无符号的。&lt;/p&gt;

&lt;p&gt;cout对象有成员函数put，用来显示一个字符。
C++中字符用单引号，字符串用双引号。&lt;/p&gt;

&lt;p&gt;关于转义字符，问号是需要转义的（参见三字母词）。&lt;/p&gt;

&lt;p&gt;C++中表示Unicode编码使用\u或者\U前缀，\uabcd或者\Uabcdef12，这种数据对应11标准中的&lt;code class=&quot;highlighter-rouge&quot;&gt;char16_t&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;char32_t&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;u'q'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U0000222B&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还有一种宽字符类型是wchar_t，这是一种拓展集合，使用2个字节。
由于cin和cout只适合处理char类型，对于wchar_t类型，使用iostream头文件中的wcin和wcout。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;wchar_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;L'P'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wcout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;L&quot;tall&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;浮点数格式&quot;&gt;浮点数格式&lt;/h1&gt;

&lt;p&gt;浮点数的表示格式就两种，第一种是常规方法，第二种是E表示法。浮点类型主要有float，double和long double三种，这是根据有效位数和指数的最小范围来划分的。通常float有32位，double有64位，long double是128位，可以从cfloat或float.h文件中查看范围限制。&lt;/p&gt;

&lt;p&gt;浮点变量默认是double类型，后缀F表示float类型，L表示long double类型。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在C++中，float类型只能表示数据中的前6位有效，double是13位有效。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;运算符&quot;&gt;运算符&lt;/h1&gt;

&lt;p&gt;求模运算符满足以下规则&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于类型转换，在使用初始化列表的时候，类型只能向低精度类型转换，否则编译将不能通过。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//可以&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//不可以&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//可以&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//不可以&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在表达式中，如果不存在浮点数，则所有的变量都会进行整形提升，即转换成int，然后进行计算，最后再转换成对应的原始数据类型。&lt;/p&gt;

&lt;p&gt;在C++中强制类型转换类似于函数调用。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//C&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//C++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C++引入了新的类型转换函数，&lt;code class=&quot;highlighter-rouge&quot;&gt;static_cast&lt;/code&gt;用于将数值类型转换成另一种数值类型。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C++11中引入了新的变量类型，auto，能根据初始化的数据自动判断变量。&lt;/p&gt;</content><author><name>zjgcjy</name></author><category term="C++" /><summary type="html">C++ Prime Plus 读书笔记1 第1章到第3章 包括一些预备知识和基本数据类型和代码格式 C++简介 C++继承了C语言的优点，同时新添加了内容，包括面向对象编程（OOP）和泛型编程。 关于C语言的编程原理，有这么几点。最开始是过程性语言，强调数据和算法，但是这种方式阅读起来很困难，修改也很复杂。所以逐渐发展成为结构化编程的方法，将分支限制为小组行为中的结构。另一个原则是自顶向下的原则，将大任务分解成小任务，然后各个击破。总体来看，结构化编程反应了过程性编程的思想，即通过执行的操作来构思一个程序。 在OOP提出来后，这种思维强调的是数据，试图让语言来满足问题的要求，是设计与问题的本质相关的数据格式。然后设计出相应的类来表示这些数据格式，同时设置相应的方法，对数据进行操作，从低级数据操作高级数据，是一种自下向上的编程方法。OOP还有助于复用代码和信息隐藏，多态和继承能派生出新类和新的方法。 泛型编程是C++支持的另一种编程模式，它强调的是独立于数据格式的任务，即模板类。 创建C++文件 如何让C++文件运行起来主要分三步，第一步是编写源代码，第二步是编译源代码，生成的代码是目标代码，也就是机器语言。但是这个时候文件还不能运行，还要进行链接，链接的过程就是将程序运行需要的库函数和标准启动函数组合起来，形成可执行代码。 为了支持某些新特性，有些编译器，比如g++编译源代码的命令： g++ -std=c++0x use_auto.cpp 常见的C++文件拓展名如下表所示。 C++实现 拓展名 UNIX C cc cxx c GNU C++ C cc cxx cpp c++ Visual C++ cpp cxx cc 第一章的内容其实没什么重要的东西，了解一下就行了。下面是第二章的内容。 C++语句 C++支持命名空间的用法，这种技术旨在编写大型程序时能将多个同名函数进行区分，有助于组织结构。 using namespace std; 如果只需要使用其中几个对象，可以直接这样写，上面的写法有点偷懒了。 using std::cout; using std::cin; using std::endl; 也可以直接不使用命名空间。 std::cout; std::cin; std::endl; 关于换行符，endl和转义字符不一样的一点在于，endl会确保程序继续运行前刷新输出缓冲区，而转义字符‘\n’则不一定，有时候不会输出，需要设置输出缓冲区的刷新模式。 C++中的类指定了对象执行的所有操作。对特定对象执行这些操作，需要给对象发送消息，一般分为两种方法，第一种是使用类的方法，第二种是使用运算符重载。 函数 在使用库函数的时候，如果找不到对应的函数，需要手动设置，如下所示。 UNIX CC sqrt.C -lm Linux g++ sqrt.C -lm 数据 使用sizeof运算符可以求类型或者变量的长度。 //可以查看变量的范围 #include&amp;lt;climits&amp;gt; C++特有的初始化语法，通过新添加的大括号初始化器，初始化常规变量的形式和类变量的形式更像。 int p(80); 关于无符号和有符号数据的范围，C++不保证符号整数的上溢和下溢。 关于数据格式，如果使用标准输入输出流，以不同格式输出的方法如下。 int a(10); // 10进制 cout &amp;lt;&amp;lt; dec; cout &amp;lt;&amp;lt; a; // 16进制 cout &amp;lt;&amp;lt; hex; cout &amp;lt;&amp;lt; a; //8进制 cout &amp;lt;&amp;lt; oct; cout &amp;lt;&amp;lt; a; 整形数据格式与类型 在整数后加l或L表示是long常量，u或U是unsigned int常量，ul或uL表示unsigned long常量，uLL表示unsigned long long常量。 对于不带后缀的十进制数，使用int，long 或者long long类型。 对于不带后缀的十六进制，使用int，unsigned int，long，unsigned long，long long，unsigned long long。 这是因为十六进制经常用来表示内存地址，而地址是非负的，无符号的。 cout对象有成员函数put，用来显示一个字符。 C++中字符用单引号，字符串用双引号。 关于转义字符，问号是需要转义的（参见三字母词）。 C++中表示Unicode编码使用\u或者\U前缀，\uabcd或者\Uabcdef12，这种数据对应11标准中的char16_t和char32_t。 char16_t ch1 = u'q'; char32_t ch2 = U'\U0000222B'; 还有一种宽字符类型是wchar_t，这是一种拓展集合，使用2个字节。 由于cin和cout只适合处理char类型，对于wchar_t类型，使用iostream头文件中的wcin和wcout。 wchar_t bob = L'P'; wcout &amp;lt;&amp;lt; bob &amp;lt;&amp;lt; L&quot;tall&quot; &amp;lt;&amp;lt; endl; 浮点数格式 浮点数的表示格式就两种，第一种是常规方法，第二种是E表示法。浮点类型主要有float，double和long double三种，这是根据有效位数和指数的最小范围来划分的。通常float有32位，double有64位，long double是128位，可以从cfloat或float.h文件中查看范围限制。 浮点变量默认是double类型，后缀F表示float类型，L表示long double类型。 在C++中，float类型只能表示数据中的前6位有效，double是13位有效。 运算符 求模运算符满足以下规则 (a/b)*b + a%b = a 关于类型转换，在使用初始化列表的时候，类型只能向低精度类型转换，否则编译将不能通过。 const int code = 66; int x = 66; char c1 = {66};//可以 char c2 = {1234};//不可以 char c3 = {code};//可以 char c4 = {x};//不可以 在表达式中，如果不存在浮点数，则所有的变量都会进行整形提升，即转换成int，然后进行计算，最后再转换成对应的原始数据类型。 在C++中强制类型转换类似于函数调用。 (long)var //C long(var) //C++ C++引入了新的类型转换函数，static_cast用于将数值类型转换成另一种数值类型。 static_cast&amp;lt;typeName&amp;gt; (value) C++11中引入了新的变量类型，auto，能根据初始化的数据自动判断变量。</summary></entry></feed>