(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{480:function(s,t,a){"use strict";a.r(t);var n=a(11),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("C++ Prime Plus 读书笔记1\n第1章到第3章 包括一些预备知识和基本数据类型和代码格式")])]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"c-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-简介"}},[s._v("#")]),s._v(" C++简介")]),s._v(" "),a("p",[s._v("C++继承了C语言的优点，同时新添加了内容，包括面向对象编程（OOP）和泛型编程。")]),s._v(" "),a("p",[s._v("关于C语言的编程原理，有这么几点。最开始是过程性语言，强调数据和算法，但是这种方式阅读起来很困难，修改也很复杂。所以逐渐发展成为结构化编程的方法，将分支限制为小组行为中的结构。另一个原则是自顶向下的原则，将大任务分解成小任务，然后各个击破。总体来看，结构化编程反应了过程性编程的思想，即通过执行的操作来构思一个程序。")]),s._v(" "),a("p",[s._v("在OOP提出来后，这种思维强调的是数据，试图让语言来满足问题的要求，是设计与问题的本质相关的数据格式。然后设计出相应的类来表示这些数据格式，同时设置相应的方法，对数据进行操作，从低级数据操作高级数据，是一种自下向上的编程方法。OOP还有助于复用代码和信息隐藏，多态和继承能派生出新类和新的方法。")]),s._v(" "),a("p",[s._v("泛型编程是C++支持的另一种编程模式，它强调的是独立于数据格式的任务，即模板类。")]),s._v(" "),a("h2",{attrs:{id:"创建c-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建c-文件"}},[s._v("#")]),s._v(" 创建C++文件")]),s._v(" "),a("p",[s._v("如何让C++文件运行起来主要分三步，第一步是编写源代码，第二步是编译源代码，生成的代码是目标代码，也就是机器语言。但是这个时候文件还不能运行，还要进行链接，链接的过程就是将程序运行需要的库函数和标准启动函数组合起来，形成可执行代码。")]),s._v(" "),a("p",[s._v("为了支持某些新特性，有些编译器，比如g++编译源代码的命令：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("x use_auto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("cpp\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("常见的C++文件拓展名如下表所示。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[s._v("C++实现")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("拓展名")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("UNIX")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("C cc cxx  c")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("GNU  C++")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("C cc cxx cpp c++")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("Visual C++")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("cpp cxx cc")])])])]),s._v(" "),a("p",[s._v("第一章的内容其实没什么重要的东西，了解一下就行了。下面是第二章的内容。")]),s._v(" "),a("h2",{attrs:{id:"c-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-语句"}},[s._v("#")]),s._v(" C++语句")]),s._v(" "),a("p",[s._v("C++支持命名空间的用法，这种技术旨在编写大型程序时能将多个同名函数进行区分，有助于组织结构。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n如果只需要使用其中几个对象，可以直接这样写，上面的写法有点偷懒了。\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("cout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("cin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n也可以直接不使用命名空间。\nstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("cout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("cin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),s._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("关于换行符，endl和转义字符不一样的一点在于，endl会确保程序继续运行前刷新输出缓冲区，而转义字符‘\\n’则不一定，有时候不会输出，需要设置输出缓冲区的刷新模式。")]),s._v(" "),a("p",[s._v("C++中的类指定了对象执行的所有操作。对特定对象执行这些操作，需要给对象发送消息，一般分为两种方法，第一种是使用类的方法，第二种是使用运算符重载。")]),s._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("p",[s._v("在使用库函数的时候，如果找不到对应的函数，需要手动设置，如下所示。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("UNIX\nCC sqrt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("C "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lm\nLinux\ng"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" sqrt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("C "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lm\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据"}},[s._v("#")]),s._v(" 数据")]),s._v(" "),a("p",[s._v("使用sizeof运算符可以求类型或者变量的长度。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//可以查看变量的范围")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<climits>")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("C++特有的初始化语法，通过新添加的大括号初始化器，初始化常规变量的形式和类变量的形式更像。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("关于无符号和有符号数据的范围，C++不保证符号整数的上溢和下溢。")]),s._v(" "),a("p",[s._v("关于数据格式，如果使用标准输入输出流，以不同格式输出的方法如下。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 10进制")]),s._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" dec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 16进制")]),s._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" hex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//8进制")]),s._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" oct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"整形数据格式与类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整形数据格式与类型"}},[s._v("#")]),s._v(" 整形数据格式与类型")]),s._v(" "),a("p",[s._v("在整数后加l或L表示是long常量，u或U是unsigned int常量，ul或uL表示unsigned long常量，uLL表示unsigned long long常量。")]),s._v(" "),a("p",[s._v("对于不带后缀的十进制数，使用int，long 或者long long类型。\n对于不带后缀的十六进制，使用int，unsigned int，long，unsigned long，long long，unsigned long long。\n这是因为十六进制经常用来表示内存地址，而地址是非负的，无符号的。")]),s._v(" "),a("p",[s._v("cout对象有成员函数put，用来显示一个字符。\nC++中字符用单引号，字符串用双引号。")]),s._v(" "),a("p",[s._v("关于转义字符，问号是需要转义的（参见三字母词）。")]),s._v(" "),a("p",[s._v("C++中表示Unicode编码使用\\u或者\\U前缀，\\uabcd或者\\Uabcdef12，这种数据对应11标准中的"),a("code",[s._v("char16_t")]),s._v("和"),a("code",[s._v("char32_t")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char16_t")]),s._v(" ch1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" u"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'q'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char32_t")]),s._v(" ch2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" U"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\U0000222B'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("还有一种宽字符类型是wchar_t，这是一种拓展集合，使用2个字节。\n由于cin和cout只适合处理char类型，对于wchar_t类型，使用iostream头文件中的wcin和wcout。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("wchar_t")]),s._v(" bob "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" L"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'P'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nwcout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" bob "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" L"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tall"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"浮点数格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点数格式"}},[s._v("#")]),s._v(" 浮点数格式")]),s._v(" "),a("p",[s._v("浮点数的表示格式就两种，第一种是常规方法，第二种是E表示法。浮点类型主要有float，double和long double三种，这是根据有效位数和指数的最小范围来划分的。通常float有32位，double有64位，long double是128位，可以从cfloat或float.h文件中查看范围限制。")]),s._v(" "),a("p",[s._v("浮点变量默认是double类型，后缀F表示float类型，L表示long double类型。")]),s._v(" "),a("p",[a("strong",[s._v("在C++中，float类型只能表示数据中的前6位有效，double是13位有效。")])]),s._v(" "),a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[s._v("#")]),s._v(" 运算符")]),s._v(" "),a("p",[s._v("求模运算符满足以下规则")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("关于类型转换，在使用初始化列表的时候，类型只能向低精度类型转换，否则编译将不能通过。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" code "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("66")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("66")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("66")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//可以")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" c2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//不可以")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" c3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//可以")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" c4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//不可以")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("在表达式中，如果不存在浮点数，则所有的变量都会进行整形提升，即转换成int，然后进行计算，最后再转换成对应的原始数据类型。")]),s._v(" "),a("p",[s._v("在C++中强制类型转换类似于函数调用。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("var  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//C")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("var"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//C++")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("C++引入了新的类型转换函数，"),a("code",[s._v("static_cast")]),s._v("用于将数值类型转换成另一种数值类型。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static_cast")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("typeName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("C++11中引入了新的变量类型，auto，能根据初始化的数据自动判断变量。")])])}),[],!1,null,null,null);t.default=e.exports}}]);