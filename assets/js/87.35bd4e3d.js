(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{519:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("window程序设计3\n窗口与消息\n建立窗口很简单，只需调用CreateWindow函数即可-_-")])]),t._v(" "),a("h2",{attrs:{id:"总体结构（重要！）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总体结构（重要！）"}},[t._v("#")]),t._v(" 总体结构（重要！）")]),t._v(" "),a("p",[t._v("进行Windows程序设计，实际上是在进行一种对象导向的程序设计（OOP）。这一点在Windows中使用得最多的对象上表现最为明显。\n桌面上最明显的窗口就是应用程序窗口。这些窗口含有显示程序名称的标题列、菜单甚至可能还有工具列和滚动条。另一类窗口是对话框，它可以有标题列也可以没有标题列。\n窗口以「消息」的形式接收窗口的输入，窗口也用消息与其它窗口通讯。")]),t._v(" "),a("h3",{attrs:{id:"窗口过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#窗口过程"}},[t._v("#")]),t._v(" 窗口过程")]),t._v(" "),a("p",[t._v("程序建立的每一个窗口都有相关的窗口消息处理程序。这个窗口消息处理程序是一个函数，既可以在程序中，也可以在动态链接库中。Windows通过呼叫窗口消息处理程序来给窗口发送消息。窗口消息处理程序根据此消息进行处理，然后将控制传回给Windows。")]),t._v(" "),a("h3",{attrs:{id:"窗口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#窗口"}},[t._v("#")]),t._v(" 窗口")]),t._v(" "),a("p",[t._v("窗口总是根据窗口类来创建的，窗口类标识了传递给窗口的窗口处理函数。并且允许窗口使用同一个窗口过程。在对象导向的程序设计中，对象是程序与数据的组合。窗口是一种对象，其程序是窗口消息处理程序。数据是窗口消息处理程序保存的信息和Windows为每个窗口以及系统中那个窗口类别保存的信息。")]),t._v(" "),a("p",[t._v("窗口消息处理程序处理给窗口发送消息。这些消息经常是告知窗口，使用者正使用键盘或者鼠标进行输入。这正是按键窗口知道它被「按下」的奥妙所在。在窗口大小改变，或者窗口表面需要重画时，由其它消息通知窗口。")]),t._v(" "),a("h3",{attrs:{id:"消息循环与消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息循环与消息队列"}},[t._v("#")]),t._v(" 消息循环与消息队列")]),t._v(" "),a("p",[t._v("Windows程序开始执行后，Windows为该程序建立一个「消息队列」。这个消息队列用来存放该程序可能建立的各种不同窗口的消息。程序中有一小段程序代码，叫做「消息循环」，用来从队列中取出消息，并且将它们发送给相应的窗口消息处理程序。有些消息直接发送给窗口消息处理程序，不用放入消息队列中。")]),t._v(" "),a("p",[t._v("窗口、窗口类、窗口消息处理过程、消息队列、消息循环和窗口消息的相互配合成就了Windows系统。")]),t._v(" "),a("h2",{attrs:{id:"详细过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#详细过程"}},[t._v("#")]),t._v(" 详细过程")]),t._v(" "),a("p",[t._v("要建立窗口，上面已经说了，首先要创建一个窗口类，并添加窗口过程。\n对该例，可以看到winmain中没有调用wndproc函数，但是其中有一个对wndproc的引用。")]),t._v(" "),a("h3",{attrs:{id:"重要的api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要的api"}},[t._v("#")]),t._v(" 重要的API")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegisterClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     为程序的窗口注册一个窗口类\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateWindow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      基于窗口类创建一个窗口\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ShowWindow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        在屏幕中显示窗口\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UpdataWindow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      指定窗口进行重绘\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        从消息队列中获取消息\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DispatchMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   将消息分发给窗口过程\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DefWindowProc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     执行默认的消息处理\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("对于返回值和调用约定而言：WndProc的返回值是LRESULT等价于LONG，类型为CALLBACK,调用约定是__stdcall。\nWinMain的类型是WINAPI，调用约定也是__stdcall。")]),t._v(" "),a("h3",{attrs:{id:"理解结构与句柄"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解结构与句柄"}},[t._v("#")]),t._v(" 理解结构与句柄")]),t._v(" "),a("p",[t._v("其中还使用了4种特殊的数据结构")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("结构")]),t._v(" "),a("th",{staticStyle:{"text-align":"right"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("MSG")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("消息结构")])]),t._v(" "),a("tr",[a("td",[t._v("WNDCLASS")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("窗口类结构")])]),t._v(" "),a("tr",[a("td",[t._v("PAINTSTRUCT")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("绘制结构")])]),t._v(" "),a("tr",[a("td",[t._v("RECT")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("矩形结构")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("句柄")]),t._v(" "),a("th",{staticStyle:{"text-align":"right"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("HINSTANCE")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("实例句柄——程序本身")])]),t._v(" "),a("tr",[a("td",[t._v("HWND")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("窗口句柄")])]),t._v(" "),a("tr",[a("td",[t._v("HDC")]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("设备句柄")])])])]),t._v(" "),a("p",[t._v("句柄本质上是引用某个对象的值，为32位DWORD。")]),t._v(" "),a("h2",{attrs:{id:"窗口类的注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#窗口类的注册"}},[t._v("#")]),t._v(" 窗口类的注册")]),t._v(" "),a("p",[t._v("窗口总是基于窗口类创建的，窗口类确定了窗口消息的窗口过程。\n在创建窗口之前，必须调用RegisterClass来注册窗口类，参数是一个指向窗口类WNDCLASS结构的指针。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tagWNDCLASSW")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    UINT        style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//窗口类风格")]),t._v("\n    WNDPROC     lpfnWndProc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//基于该窗口类的窗口过程长指针")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("         cbClsExtra"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//预留的额外空间")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("         cbWndExtra"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//预留的额外空间")]),t._v("\n    HINSTANCE   hInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例句柄")]),t._v("\n    HICON       hIcon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//图标句柄：设定图标")]),t._v("\n    HCURSOR     hCursor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//鼠标句柄：设定鼠标")]),t._v("\n    HBRUSH      hbrBackground"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//刷子句柄：设定背景")]),t._v("\n    LPCWSTR     lpszMenuName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设定窗口类菜单")]),t._v("\n    LPCWSTR     lpszClassName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//窗口类的名字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("通常做法：定义一个窗口类的变量 WNDCLASS wndclass，然后对该结构的10个字段进行初始化，并调用RegisterClass。最重要的2个字段是第二个和最后一个。\nwndclass.lpfnWndProc=WndProc，则wndproc将处理所有基于该窗口类创建的窗口的所有消息。实际是函数指针。\n将10个字段初始化之后，调用RegisterClass就可以注册窗口类，唯一的参数是指向wndclass的指针。为了防止调用RegisterClass出错，进行一下异常处理。如果为了防止出现其他错误，则利用函数GetLastError可以获知错误原因。")]),t._v(" "),a("h2",{attrs:{id:"创建窗口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建窗口"}},[t._v("#")]),t._v(" 创建窗口")]),t._v(" "),a("p",[t._v("窗口类只是定义窗口的一般特性，基于窗口类可以创建不同的窗口。调用CreateWindow创建窗口时，可以指定与窗口有关的细节。\n调用该函数通过独立参数指定。第一个参数是窗口类名称，通过这种方式与窗口类建立联系。程序实例句柄为WinMain中的句柄参数。该函数的返回值是指向该窗口的句柄。在windows中每一个窗口都有句柄，在程序中可以用句柄来对窗口进行引用。")]),t._v(" "),a("h2",{attrs:{id:"显示窗口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显示窗口"}},[t._v("#")]),t._v(" 显示窗口")]),t._v(" "),a("p",[t._v("当CreateWindow完成后，OS已经为窗口分配了内存空间。为了显示在桌面上，需要调用ShowWindow。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ShowWindow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HWND hWnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nCmdShow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("第一个参数指向窗口句柄，第二个是WinMain接受的值，决定这窗口的初始显示方式。\nUpdateWindow(hwnd)将重绘客户区。")]),t._v(" "),a("h2",{attrs:{id:"消息循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息循环"}},[t._v("#")]),t._v(" 消息循环")]),t._v(" "),a("p",[t._v("在UpdataWindow之后，窗口在屏幕中就可见了。这时程序必须维护一个消息队列，用于接受键盘输入和鼠标输入。当输入事件发生后，windows会自动将这些事件转换成消息，放置在程序的消息队列中。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TranslateMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DispatchMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("程序通过这段消息循环来从消息队列中获取消息。第一个参数是MSG的变量，第二、三、四为NULL和0，表示程序获取该程序所创建的所有窗口的消息。\nMSG的结构:")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tagMSG")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    HWND        hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//消息指向的窗口句柄")]),t._v("\n    UINT        message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//消息标识符,WM_标识")]),t._v("\n    WPARAM      wParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//DWORD消息参数")]),t._v("\n    LPARAM      lParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//DWORD消息参数")]),t._v("\n    DWORD       time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//信息进入消息队列的时间")]),t._v("\n    POINT       pt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//消息进入消息队列的位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" MSG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("PMSG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NEAR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("NPMSG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FAR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("LPMSG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tagPOINT")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    LONG  x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//鼠标x坐标")]),t._v("\n    LONG  y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//鼠标y坐标")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" POINT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("PPOINT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NEAR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("NPPOINT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FAR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("LPPOINT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("如果消息队列中的消息不等于WM_QUIT 0x12，则GetMessage将返回非0值，进行循环判断。\nTranslateMessage(&msg)用来将键盘输入进行转换。DispatchMessage(&msg)将msg结构再次返回给windows。\nwindows将根据消息发送到适当的窗口过程来处理，也就是说是windows调用了窗口过程。\n当窗口过程处理完毕后，控制权转回windows，而windows将为DispatchMessage继续提供服务，结束之后，进行下一轮GetMessage调用。")]),t._v(" "),a("h2",{attrs:{id:"窗口过程-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#窗口过程-2"}},[t._v("#")]),t._v(" 窗口过程")]),t._v(" "),a("p",[t._v("到现在，已经了解了注册窗口类，创建窗口，在屏幕中显示窗口，程序进入消息循环，从消息队列中检索消息。\n程序可以包含多个窗口过程，但是一个窗口过程总是和一个通过调用RegisterClass注册的特定的窗口类相关联。CreateWindow基于特定的窗口类创建窗口。\n所以一个窗口类可以创建多个窗口，但是这些窗口的窗口过程都应该是同一个，即在窗口类中注册的那一个。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("LRESULT CALLBACK "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WndProc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HWND hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UINT message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" WPARAM wParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" LPARAM lParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("窗口过程的参数与MSG的前4个字段一致。分别是窗口句柄，消息标识符，2个DWORD的消息参数。\n程序不直接对窗口过程进行调用，总是用windows调用完成。如果希望程序直接调用窗口过程，可以使用SendMessage来实现。")]),t._v(" "),a("h2",{attrs:{id:"消息处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息处理"}},[t._v("#")]),t._v(" 消息处理")]),t._v(" "),a("p",[t._v("对于消息的处理，由于WINUSER.H中定义了以WM开头的标识符，通常使用switch-case语句来确定窗口收到的消息。对于不进行处理的消息，使用默认窗口过程DefWindowProc来返回。")]),t._v(" "),a("h3",{attrs:{id:"wm-create-0x1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wm-create-0x1"}},[t._v("#")]),t._v(" WM_CREATE(0x1)")]),t._v(" "),a("p",[t._v("这是窗口过程收到的第一个消息，当windows在WinMain中调用CreateWindow时，windows将窗口过程的第一个参数设置为该窗口的句柄，第二个参数为WM_CREATE，同时窗口过程对该消息进行处理，控制权返回给windows，继续执行WinMain。\n通常情况下，窗口过程对这个消息进行处理时，对窗口进行一次性的初始化，处理完成后将返回0。")]),t._v(" "),a("h3",{attrs:{id:"wm-paint-0xf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wm-paint-0xf"}},[t._v("#")]),t._v(" WM_PAINT(0xf)")]),t._v(" "),a("p",[t._v("窗口过程处理的第二个消息，当客户区部分或全部无效且必须更新时，意味着窗口必须重绘。\n客户区为什么会无效？")]),t._v(" "),a("ol",[a("li",[t._v("当窗口首次被创建时，整个客户区都是无效的，第一条WM_PAINT将在UpdataWindow之后出现，指示窗口过程进行绘制。")]),t._v(" "),a("li",[t._v("调制窗口的大小时，客户区会无效。")]),t._v(" "),a("li",[t._v("最小化窗口，再恢复时，windows并不会保存客户区的内容，宣布窗口无效，在接受消息后，窗口过程负责重绘。")]),t._v(" "),a("li",[t._v("在拖动窗口导致窗口之间重叠时，windows不负责保存被重叠的部分，重叠部分不再被遮挡时，窗口被标记无效。")])]),t._v(" "),a("p",[t._v("对该消息的处理框架：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("hdc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BeginPaint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetClientRect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DrawText")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hdc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TEXT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, Windows 10!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DT_SINGLELINE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" DT_CENTER "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" DT_VCENTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EndPaint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("两个函数的第一个参数是窗口句柄，第二个是指向POINTSTRUCT的指针，其包含窗口过程来对客户区进行重绘。\n在BeginPaint调用期间，windows会对客户区进行擦除，使用注册窗口类指定的刷子，将使整个客户区有效，并返回设备环境句柄，通过设备环境句柄来显示，无法在客户区外绘制，EndPaint用于释放设备环境句柄，使其无效。\n如果不对WM_PAINT消息进行处理，则必须交给DefWindowProc处理。\nGetClientRect第一个是窗口句柄，第二个是RECT的矩形结构指针。\nDrawText功能就是绘制文本，第一个参数是设备环境句柄，第二个是文本，第三个是-1，表示以0结尾。最后的标识使文本单行显示，并且水平和垂直居中。")]),t._v(" "),a("h3",{attrs:{id:"wm-destory-0x2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wm-destory-0x2"}},[t._v("#")]),t._v(" WM_DESTORY(0x2)")]),t._v(" "),a("p",[t._v("该消息表示windows正常销毁窗口，比如关闭窗口时，发出该消息。通过调用PostQuitMessage(0)将WM_QUIT消息插入消息队列，之后GetMessage获取消息，退出消息循环。程序最后返回 msg.wParam ，通常是0，来结束WinMain。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ol",[a("li",[t._v("窗口过程WndProc总是和RegisterClass的注册窗口类关联，基于该窗口类的窗口使用窗口类指定的窗口过程来对消息进行处理。windows通过调用窗口过程来向窗口发送消息。")]),t._v(" "),a("li",[t._v("WndProc什么时候被windows调用？新建窗口，关闭窗口，窗口大小变动，窗口移动，在客户区发生操作，客户区需要重绘时等等。")]),t._v(" "),a("li",[t._v("窗口过程可以为基于同一窗口类创建的窗口处理消息，即通过hwnd参数，知道是哪个窗口接受消息。")])]),t._v(" "),a("h3",{attrs:{id:"队列与非队列消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列与非队列消息"}},[t._v("#")]),t._v(" 队列与非队列消息")]),t._v(" "),a("p",[t._v("队列消息就是从消息队列中GetMessage检索出来的，从而投递到窗口过程中。非队列消息是指windows对窗口过程的直接调用，消息被直接发送到窗口过程，比如WM_CREATE和WM_PAINT。窗口过程会接受所有的消息，是窗口的消息中心。")])])}),[],!1,null,null,null);s.default=e.exports}}]);