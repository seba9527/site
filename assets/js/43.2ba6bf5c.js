(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{476:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("本篇是《深入理解计算机系统》的笔记。关于这本书前面的程序结构、硬件电路层我没怎么看，在计组里基本学过，没有深入研究。主要看了后面的Linux系统部分，顺带复习操作系统了。")])]),s._v(" "),a("h2",{attrs:{id:"链接-位置无关代码pic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接-位置无关代码pic"}},[s._v("#")]),s._v(" 链接——位置无关代码PIC")]),s._v(" "),a("p",[s._v("为了使多个进程可以共享一个共享模块的副本，GNU使用加载而无需重定位的代码，即GCC使用"),a("code",[s._v("-fpic")]),s._v("选项生成PIC代码。")]),s._v(" "),a("h3",{attrs:{id:"pic数据引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pic数据引用"}},[s._v("#")]),s._v(" PIC数据引用")]),s._v(" "),a("p",[s._v("无论我们在内存的何处加载目标模块，数据段和代码段之间的距离总是保持不变。因此，代码段中任何指令和数据段中的任何变量之间的距离都是一个常量，与代码段和数据段在内存中的绝对位置无关。\n编译器在代码段在骑士部分创建GOT表，所有被引用的函数和变量都有一个条目，使得他包含目标的正确的绝对地址。\n所以在进行PIC数据引用的时候，只要通过GOT就能加载全局变量的地址，而编译器可以通过相对引用来访问GOT，从而实现了对数据的相对访问。")]),s._v(" "),a("h3",{attrs:{id:"pic函数调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pic函数调用"}},[s._v("#")]),s._v(" PIC函数调用")]),s._v(" "),a("p",[s._v("为了使进程在运行时调用由共享库定义的函数，由于编译器没有办法预测函数的运行时地址，所以它的共享模块可以加载到任何地址，GNU编译器使用了延时绑定技术，将过程地址的绑定推迟到第一次调用的时候进行。使用两个表，一个GOT，一个是PLT。GOT是数据段的一部分，PLT是代码段的。\nPLT是个数组，其中0索引是一个特殊条目，负责跳转到动态连接器中。和PLT一起使用时，GOT0索引和1索引包含动态连接器在解析函数地址所需要的地址。GOT2索引是动态链接器在"),a("code",[s._v("ld-linux.so")]),s._v("的入口点。其余的对于被调函数，不过地址需要在运行的时候再解析，每个GOT项对应一个PLT项。初始时，GOT的项指向对应PLT项的第二条指令(一般是push 偏移量)。")]),s._v(" "),a("h3",{attrs:{id:"延时绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延时绑定"}},[s._v("#")]),s._v(" "),a("strong",[s._v("延时绑定")])]),s._v(" "),a("ul",[a("li",[s._v("第一次调用，代码段通过call指令跳转到PLT表的某个表项。\n"),a("ul",[a("li",[s._v("执行PLT表项中第一条指令，根据GOT表项的数据进行间接跳转。而此时GOT表中存放的是对应的PLT项的下一条指令，所以又跳回了PLT表，相当于直接执行下一条指令。")]),s._v(" "),a("li",[s._v("执行PLT表项中第二条指令，进行push压入偏移量，偏移量表示函数对应在GOT表中的偏移。")]),s._v(" "),a("li",[s._v("执行PLT表项中第三条指令，跳转到PLT0索引处，将GOT1压栈，通过GOT2间接跳转到动态连接器中。动态链接器根据两个参数来决定函数的相对位置，并且重写GOT表项，同时执行函数。")])])]),s._v(" "),a("li",[s._v("第二次调用，同样是代码段通过call指令跳转到PLT表的某个表项。\n"),a("ul",[a("li",[s._v("执行PLT表项中第一条指令，根据GOT表项的数据进行间接跳转。但是和第一次不一样的是，此时的GOT表项中的数据是所执行函数的地址。所以直接执行函数。")])])])]),s._v(" "),a("h2",{attrs:{id:"进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[s._v("#")]),s._v(" 进程")]),s._v(" "),a("p",[s._v("关于进程调度这部分就不说了。")]),s._v(" "),a("h3",{attrs:{id:"进程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程控制"}},[s._v("#")]),s._v(" 进程控制")]),s._v(" "),a("p",[s._v("每个进程有唯一的进程ID，getpid函数可以返回调用进程的PID。getppid返回他的父进程的PID。")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/types.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回类型`pid_t`是int型的。")]),s._v("\npid_t "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\npid_t "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getppid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"进程的退出和创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程的退出和创建"}},[s._v("#")]),s._v(" 进程的退出和创建")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdlib.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//进程退出。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"子进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子进程"}},[s._v("#")]),s._v(" 子进程")]),s._v(" "),a("p",[s._v("父进程可以通过"),a("code",[s._v("fork")]),s._v("来创建子进程。")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/types.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//子进程返回0，父进程返回子进程的PID，错误返回-1。")]),s._v("\npid_t "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("子进程得到的虚拟地址控件和父进程是一样的，包括代码段和数据段，但是pid和父进程不同。通过fork函数的返回值可以判断当前是在父进程还是在子进程中。"),a("code",[s._v("pid_t==0")]),s._v("是子进程，但子进程的PID不为0。需要注意的是，父子进程是并发执行的，两个进程执行的速度不确定，但是父子进程是两个独立的进程，有自己的私有地址空间，变量保持独立。")]),s._v(" "),a("h4",{attrs:{id:"进程休眠"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程休眠"}},[s._v("#")]),s._v(" 进程休眠")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" secs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置休眠时间，返回还要休眠的时间")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pause")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//总是返回-1，收到型号后恢复。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"进程加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程加载"}},[s._v("#")]),s._v(" 进程加载")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("execve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("envp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("其中argv是参数列表，envp是环境变量列表。当main开始执行的时候，用户栈栈底往上依次是envp、argr、argc，然后是libc_start_main的栈帧，再往上是之后的main栈帧。\n关于fork和execve函数的区别。fork是在新的子进程中运行相同的程序，是一个副本。而execve在当前进程上下文中加载并运行一个新的程序，会覆盖当前进程的地址空间，但是他不创建新的进程，pid是一样的。")]),s._v(" "),a("h4",{attrs:{id:"进程组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程组"}},[s._v("#")]),s._v(" 进程组")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\npid_t "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getpgrp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回当初进程的组进程id")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setpgid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pid_t pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pid_t  pgid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//改变自己或其他进程的进程组")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[s._v("#")]),s._v(" 内存管理")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://cjynet.top/2018/03/07/RCE%20with%20IDAPro/IDApro%E6%9D%83%E5%A8%81%E4%BB%A3%E7%A0%81%E7%A0%B4%E8%A7%A3%E6%8F%AD%E7%A7%98%E7%AC%94%E8%AE%B0%E4%B8%80/",target:"_blank",rel:"noopener noreferrer"}},[s._v("堆和内存管理"),a("OutboundLink")],1),s._v(" "),a("a",{attrs:{href:"http://cjynet.top/2017/08/06/windows/Win32ASM-1/",target:"_blank",rel:"noopener noreferrer"}},[s._v("地址转换"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);