(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{505:function(s,a,n){"use strict";n.r(a);var t=n(14),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("hr"),s._v(" "),n("blockquote",[n("p",[s._v("Android Jni调试\n这篇主要是依靠IDA进行调试So库函数，不涉及脱壳和反调试的内容。")])]),s._v(" "),n("h2",{attrs:{id:"基础篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础篇"}},[s._v("#")]),s._v(" 基础篇")]),s._v(" "),n("p",[s._v("基本调试方式。")]),s._v(" "),n("h3",{attrs:{id:"准备工作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[s._v("#")]),s._v(" 准备工作")]),s._v(" "),n("p",[s._v("把ida目录下android_server 传到android 目录中")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("adb push  android_server /data/local/tmp/\nadb shell\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("su")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /data/local/tmp/\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("755")]),s._v("/777 android_server\n./android_server\nIDA Android "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("-bit remote debug s-Rays "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2004")]),s._v("-2017 Listening on "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:23946"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("在windows 控制台下转发window到模拟器或者手机的端口")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("adb forward tcp:23946 tcp:23946\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"开始调试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开始调试"}},[s._v("#")]),s._v(" 开始调试")]),s._v(" "),n("p",[s._v("IDA 附加localhost 端口默认23946 ，选择远程Android调试。")]),s._v(" "),n("p",[s._v("如果出现：\nBogus or irresponsive remote server\n错误\n在adb shell中执行\nsetenforce 0\n关闭selinux安全机制（需要root权限）\n之后在Debuggger 中的attach 上android 所对应的程序就行了\n找到需要下断点的位置 设置断点，进行调试即可\n现在本地模块中找到需要下断点的函数偏移\n然后获取远程模块的基地址，基地址+偏移即是当前需要下断点的地址\nCtrl + s显示当前的所有加载的模块信息，找可读可执行的，一般代码段都是不可写的。\n需要下断点的地址，然后设置断点，点击按钮就断下来了。")]),s._v(" "),n("h3",{attrs:{id:"不懂的地方"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不懂的地方"}},[s._v("#")]),s._v(" 不懂的地方")]),s._v(" "),n("p",[s._v("还有几点不明白的地方")]),s._v(" "),n("ol",[n("li",[s._v("加载so的偏移量和我静态算的偏移量不一致，而网上所有教程都是一致的，不明白，鱼哥说是ASLR的问题，不过是RVA啊，不怎么明白。")]),s._v(" "),n("li",[s._v("jeb的作用没明白")]),s._v(" "),n("li",[s._v("linker的作用没明白")]),s._v(" "),n("li",[s._v("IDA加载方式，或者说dex加载so文件方式不明白。")])]),s._v(" "),n("h2",{attrs:{id:"进阶篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进阶篇"}},[s._v("#")]),s._v(" 进阶篇")]),s._v(" "),n("p",[s._v("采用调试模式启动，与传统方式不同的是，这种方式会使得dex未加载如内存。 注：jeb调试只需要使用adb然后debug启动apk就行了，不需要端口转发。\n或者以调试模式启动")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("adb shell am start -w packagename/activity（此处记得用activity的绝对路径）\ne.g adb shell am start -D -n cn.chaitin.geektan.crackme/cn.chaitin.geektan.crackme.MainActivity\nadb shell "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" infomation\nadb forward tcp:0000 jdwp:0000\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("设置端口转发，这条命令的含义可以认为是在本地端口端口与手机进程之间建立一条通道\n附加程序成功后，选择，Debugger option，勾选")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("suspend")]),s._v(" on process entry point\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("suspend")]),s._v(" on thread start/exit\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("suspend")]),s._v(" on library load/unload\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("三项，然后按f9运行调试程序，此时IDA pro 挂起\n使用jdb恢复程序执行")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("jdb -connect com.sun.jdi.SocketAttach:hostname"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1,port"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0000\njdb -connect com.sun.jdi.SocketAttach:hostname"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("localhost,port"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8700")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("此时IDA pro断在linker中，此时module中并没有libcrackme.so，说明licrackme.so还没有加载到内容中，只需要跟几步f8，在寄存器中看到libcrackme.so加载进来了，就可以在module中找到，有两种情况")]),s._v(" "),n("ol",[n("li",[s._v("如果IDA Pro能够解析成功，双击module中的libcrackme.so就可以看到它export的函数，就可以右键下断点了")]),s._v(" "),n("li",[s._v("如果IDA Pro解析失败，需要再开一个IDA，查找到要下断的函数地址，加上libcrackme.so加载到内存的地址即可(在init_array下断只能使用这种方法)。")])]),s._v(" "),n("p",[s._v("IDA Pro按F9几次，直到断在自己下断的地方即可。")]),s._v(" "),n("h2",{attrs:{id:"高级篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高级篇"}},[s._v("#")]),s._v(" 高级篇")]),s._v(" "),n("p",[s._v("也不算高级篇，记一下第三种ida调试技巧。\n首先把要分析的libcrackme.so文件拉进IDA里面在要下断点的JNI_Onload处下好断点。\n启动android_server与上面一样\n端口转发以及调试模式启动\n先设置一下Debugger为远程Android模式\nIDA进行附加进程回到之前静态分析libcrackme.so的IDA界面单击Debugger -> Process options 配置调试信息，这里只需配置hostname为localhost\n点击Debugger -> Attach to process进行附加进程\n"),n("del",[s._v("jdwp转发（当然打开DDMS就不需要这一步了）jdb附加")]),s._v("当时需要吗？为什么我现在用ida都不需要。。其实就是第一种方式。\nF9执行一路到断点，一般需要点击按钮事件。")])])}),[],!1,null,null,null);a.default=e.exports}}]);