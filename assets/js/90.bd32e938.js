(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{531:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("window程序设计4\n文本输出")])]),t._v(" "),a("h2",{attrs:{id:"wm-paint消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wm-paint消息"}},[t._v("#")]),t._v(" WM_PAINT消息")]),t._v(" "),a("p",[t._v("大多数windows程序会在WinMain初始化进入消息循环之前调用UpdateWindow函数，windows利用这个机会传递最初的WM_PAINT消息。")]),t._v(" "),a("ul",[a("li",[t._v("移动窗口")]),t._v(" "),a("li",[t._v("调整大小")]),t._v(" "),a("li",[t._v("滚动客户区")]),t._v(" "),a("li",[t._v("调用API显示发送WM_PAINT消息")])]),t._v(" "),a("h3",{attrs:{id:"有效与无效矩形"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有效与无效矩形"}},[t._v("#")]),t._v(" 有效与无效矩形")]),t._v(" "),a("p",[t._v("窗口过程并不是更新整个客户区，通常只需要更新其中一部分，最常见的是更新一个矩形区域。\n需要被重新绘制的区域被称为无效区域，客户区有无效区域导致windows在消息队列中放置一条WM_PAINT消息。\nwindows内部为每个窗口保存了一个绘制消息结构，保存着可以覆盖该区域的最小矩形，称之为无效矩形。若有多个无效矩形，窗口过程在处理WM_PAINT消息之前，windows会更新矩形大小，不会在消息队列中放置多条WM_PAINT消息。\n窗口过程可以调用InvalidateRect函数来强制使矩形失效，调用BeginPaint使整个客户区有效。")]),t._v(" "),a("h2",{attrs:{id:"关于gui"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于gui"}},[t._v("#")]),t._v(" 关于GUI")]),t._v(" "),a("p",[t._v("绘制窗口的客户区需要调用windows的图形接口函数，比如DrawText，最常用的是TextOut。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TextOut")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hdc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" psText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iLength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("TextOut向客户区输出一个字符串，psText是指向字符串的指针，iLength是长度，x和y是坐标，hdc是设备环境句柄。")]),t._v(" "),a("h3",{attrs:{id:"关于设备环境句柄hdc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于设备环境句柄hdc"}},[t._v("#")]),t._v(" 关于设备环境句柄HDC")]),t._v(" "),a("p",[t._v("首先句柄是一个32DWORD的值，windows使用句柄来确定一个对象，设备环境句柄和特定的设备相关联。\n设备环境的某些值决定了GUI函数工作的具体细节，包括文本颜色，字体，大小。\n程序在绘制前必须获取设备环境句柄，当完成绘制之后，必须释放设备环境句柄。释放之后，句柄不再有效也不能再被使用。")]),t._v(" "),a("h3",{attrs:{id:"获取设备环境句柄-方式一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取设备环境句柄-方式一"}},[t._v("#")]),t._v(" 获取设备环境句柄_方式一")]),t._v(" "),a("p",[t._v("在对WM_PAINT消息处理时候，BeginPaint函数对指定的窗口句柄擦去无效区域，填充ps各个字段的值，同时返回一个hdc，此后，程序可以通过引用这个hdc来对设备环境句柄进行操作。调用EndPaint来释放设备环境句柄。\n常用框架：")]),t._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" WM_PAINT"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    hdc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BeginPaint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    使用GDI函数\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EndPaint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"绘制信息结构paintstruct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绘制信息结构paintstruct"}},[t._v("#")]),t._v(" 绘制信息结构PAINTSTRUCT")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tagPAINTSTRUCT")]),t._v("    \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    HDC         hdc "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    BOOL        fErase "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    RECT        rcPaint "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    BOOL        fRestore "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    BOOL        fIncUpdate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    BYTE        rgbReserved"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" PAINTSTRUCT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("程序只使用前三个字段，其它字段由Windows内部使用。hdc是设备环境句柄。在大多数情况下， fErase被标志为FALSE(0)，这意味着Windows已经擦除了无效矩形的背景。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InvalidateRect")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TRUE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("在调用BeginPaint之前调用该函数可以在该更新矩形之外绘制。这个调用使整个客户区无效化，调用BeginPaint擦除原有背景。如果设置为FALSE，则BeginPaint不会擦除背景，原来背景被保留。\n通常做法：简单的重绘整个客户区，重绘一部分并不实际。")]),t._v(" "),a("h3",{attrs:{id:"获取设备环境句柄-方式二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取设备环境句柄-方式二"}},[t._v("#")]),t._v(" 获取设备环境句柄_方式二")]),t._v(" "),a("p",[t._v("在对WM_PAINT消息进行处理时绘制客户区是很有用的，但是在处理其他消息时候，也需要设备环境句柄，可以调用GetDC函数。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("hdc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetDC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n使用GUI函数\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReleaseDC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hdc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("注意该函数返回的设备环境句柄中的剪裁矩形是整个客户区，GetDC不会使无效矩形有效化，如果需要将客户区有效化，使用ValidateRect (hwnd, NULL)，通常这两个函数用户处理键盘鼠标消息，而不必为了生成WM_PAINT消息刻意使客户区一部分无效化。\n类似的GetDC函数GetWindowDC函数，返回整个窗口的设备环境句柄（包括任务栏等），可以处理WM_NCPAINT消息。")]),t._v(" "),a("h3",{attrs:{id:"讨论textout函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讨论textout函数"}},[t._v("#")]),t._v(" 讨论TextOut函数")]),t._v(" "),a("p",[t._v("TextOut (hdc, x, y, psText, iLength)第一个是设备环境句柄，设备环境决定了输出文字的样式。\n设备环境句柄同时定义了一个裁剪区域，GetDC返回的是整个客户区，从BeginPaint返回到就是无效区域。TextOut只会在裁剪区域中输出。")]),t._v(" "),a("h3",{attrs:{id:"系统字体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统字体"}},[t._v("#")]),t._v(" 系统字体")]),t._v(" "),a("p",[t._v("windows默认的字体是系统字体，或称为SYSTEM_FONT,系统字体是点阵字体，由像素点构成。\n为了输出多行文本，需要知道文本中字符的大小，由字符的高度可以决定下一行文字的位置，可以通过GetSystemMetrics函数来获取用户的界面尺寸。同样可以通过GetTextMertics获取程序的字体大小，windows把字符尺寸的各种值复制到类型为TEXTMETRIC的结构中，")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tagTEXTMETRIC")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    LONG tmHeight "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LONG tmAscent "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LONG tmDescent "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LONG tmInternalLeading "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LONG tmExternalLeading "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LONG tmAveCharWidth "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LONG tmMaxCharWidth "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    其他结构字段\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nTEXTMETRIC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" PTEXTMETRIC "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("要使用GetTextMetrics 函数前，定义TEXTMETRIC tm ;\n在需要确定文本的大小前，需要首先获取设备环境句柄，然后调用GetTextMetrics：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("hdc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetDC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetTextMetrics")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hdc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReleaseDC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hwnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hdc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("之后就可以确定字体的大小。\n详细的这部分我不记了，比较繁琐。如果专门改变字体可以看这部分。")]),t._v(" "),a("h3",{attrs:{id:"文本格式化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文本格式化"}},[t._v("#")]),t._v(" 文本格式化")])])}),[],!1,null,null,null);s.default=e.exports}}]);