(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{507:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("在去年的inctf2018中，其中出现了一道Go语言编写的进程通信逆向题，无论是从题目整体设计还是解题思路上来说都独树一帜，自己在解题过程中遇到了很多问题，但我这不打算做过多探讨，网上也有大佬的解题过程，本文仅针对该题涉及到的无符号Go语言恢复信息问题进行详细讨论。")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("在整个后期整理过程中，自己参考了很多资料，放出所有链接，下文中也会有对应的说明。")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://bbs.pediy.com/thread-247232.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("奈沙夜影师傅的题解"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.freebuf.com/articles/terminal/134980.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分析静态编译无符号文件的方法"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.freebuf.com/articles/others-articles/176803.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go语言逆向去符号信息还原"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://rednaga.io/2016/09/21/reversing_go_binaries_like_a_pro/",target:"_blank",rel:"noopener noreferrer"}},[t._v("reversing_go_binaries_like_a_pro"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.anquanke.com/post/id/85694",target:"_blank",rel:"noopener noreferrer"}},[t._v("手把手教你如何专业地逆向GO二进制程序"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/sibears/IDAGolangHelper",target:"_blank",rel:"noopener noreferrer"}},[t._v("IDAGolangHelper"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/joxeankoret/diaphora",target:"_blank",rel:"noopener noreferrer"}},[t._v("diaphora"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml",target:"_blank",rel:"noopener noreferrer"}},[t._v("IDA F.L.I.R.T. Technology: In-Depth"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://bbs.pediy.com/thread-229574.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("IDA7.0 IDAPython MakeStr Bug fix"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/doudoudouzoule/article/details/81530376",target:"_blank",rel:"noopener noreferrer"}},[t._v("angr源码分析——库函数识别identify"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://www.cnxct.com/why-golang-elf-binary-file-is-large-than-c/",target:"_blank",rel:"noopener noreferrer"}},[t._v("golang语言编译的文件大小解析"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://bbs.pediy.com/thread-198306.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("golang编译去符号信息逆向"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/itogo/p/8645441.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("go语言学习-常用命令"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"初步分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初步分析"}},[t._v("#")]),t._v(" 初步分析")]),t._v(" "),s("p",[t._v("首先用file命令简单查看下文件类型，发现是64位的，由题目名也能猜出是和go语言有关的逆向题，但是发现虽然是动态链接的，但是无符号，这是比较坑的，心中有点小怕。")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/ultimateGOal\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/ultimateGOal: ELF "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("-bit LSB executable, x86-64, version "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SYSV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, stripped\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("那么用ida打开之后，由于没有符号的原因，我们并不能找到主函数的位置，不熟悉go语言逆向的同学可能会不清楚go语言逆向的入口，那么简单说明一下。")]),t._v(" "),s("h3",{attrs:{id:"简单demo测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单demo测试"}},[t._v("#")]),t._v(" 简单demo测试")]),t._v(" "),s("p",[t._v("对下面这个简单的go语言例子而言，我们在进行编译go程序的时候，会生成可执行文件，而go程序需要满足2个条件：")]),t._v(" "),s("ol",[s("li",[t._v("go程序中需要包含main包")]),t._v(" "),s("li",[t._v("在main包中还必须包含main函数")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("也就是说go语言的入口点是"),s("code",[t._v("main.main")]),t._v("（真正的入口点），即是main包下的main函数。对这个demo，我们编译之后用ida打开查看，搜索主函数，当确定了主函数入口时，尝试反编译代码，缺发现失败，如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_15-16-54.png",alt:"Snipaste_2019-01-22_15-16-54"}})]),t._v(" "),s("p",[t._v("给出的提示是"),s("code",[t._v("Size of 'int' is 8 (4 expected)")]),t._v("，对于这种错误，通过选项中的编译设置，修改整型的字长大小即可解决问题，如下图所示。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_15-19-07.png",alt:"Snipaste_2019-01-22_15-19-07"}})]),t._v(" "),s("p",[t._v("得到如下的代码：")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" __cdecl "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main_main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  __int64 v0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rdx")]),t._v("\n  error_0 v1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// di")]),t._v("\n  __interface_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" ST00_24_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ST00_24")]),t._v("\n  __interface_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" v3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [rsp+30h] [rbp-18h]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("retaddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [rsp+48h] [rbp+0h]")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" __int64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("retaddr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_QWORD "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__readfsqword")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFFFFFF8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runtime_morestack_noctxt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  v3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DIE_10518_interface_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  v3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__int64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("main_statictmp_0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  ST00_24_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DIE_10518_interface_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("v3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  ST00_24_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1LL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  ST00_24_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1LL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fmt_Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ST00_24_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])]),s("p",[t._v("对于ida反编译出的go语言代码，可读性较差，类型转换较多，结构体较复杂，异常处理比较冗长，对于"),s("code",[t._v("main_statictmp_0")]),t._v("这个结构体，在go语言中包括了2部分，分别是字符串偏移量和字符串长度，这个结构体所指向的是"),s("code",[t._v("string <offset unk_4B317B, 0Dh>")]),t._v('，指出了字符串的偏移量和长度，长度是0xd（即"Hello World!"的长度），另外go语言中所有字符串都是放在一起的，所以偏移量和长度是很关键的，如下图所示：')]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_15-31-32.png",alt:"Snipaste_2019-01-22_15-31-32"}})]),t._v(" "),s("h2",{attrs:{id:"解决无符号的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决无符号的问题"}},[t._v("#")]),t._v(" 解决无符号的问题")]),t._v(" "),s("p",[t._v("对于上文那个demo而言，是有符号的程序，逆向起来有信息可以参考，大大加快了逆向的速度，但是对这道题而言，是无符号的，无符号的程序逆向起来由于不知道函数的功能，会特别饶，很容易把人绕进去。如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_16-56-51.png",alt:"Snipaste_2019-01-22_16-56-51"}})]),t._v(" "),s("p",[t._v("当然也有人能纯静态分析出来，比如奈沙夜影师傅，参考最上面贴出来的链接，使用动态调试结合黑盒测试的方法Orz。师傅也自嘲道："),s("code",[t._v("Go语言的逆向感觉目前没啥方便的工具，只能硬怼汇编，缺少符号的情况下还是有点麻烦的，等一个师傅们的指教，这个题目我是纯黑盒调试出来的")]),t._v("。针对这个问题，自己参考了几篇博文，收集了一些方法，供参考。")]),t._v(" "),s("h3",{attrs:{id:"从签名角度出发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从签名角度出发"}},[t._v("#")]),t._v(" 从签名角度出发")]),t._v(" "),s("p",[t._v("众所周知，签名是对函数、第三方库很好的检测方式，通过签名，ida很容易能分析出函数的名称，从而大概知道函数的作用。由于没有官方的签名库，所以这需要自己制作，参考了"),s("a",{attrs:{href:"https://www.freebuf.com/articles/terminal/134980.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("diffway@兰云科技银河实验室"),s("OutboundLink")],1),t._v("的方法，论述如下：")]),t._v(" "),s("h4",{attrs:{id:"idb2pat-py-sigmake制作签名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idb2pat-py-sigmake制作签名"}},[t._v("#")]),t._v(" idb2pat.py+sigmake制作签名")]),t._v(" "),s("p",[t._v("idb2pat.py是火眼公司"),s("code",[t._v("FireEye Labs Advanced Reverse Engineering")]),t._v("团队编写的脚本，代码在GitHub上开源，该脚本主要通过CRC16的方式来计算每个函数块的特性，从而来识别不同的函数。这点也和IDA官方对签名文件的说明相符合，参见"),s("a",{attrs:{href:"https://www.hex-rays.com/products/ida/tech/flirt/in_depth.shtml",target:"_blank",rel:"noopener noreferrer"}},[t._v("IDA F.L.I.R.T. Technology: In-Depth"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_16-29-23.png",alt:"Snipaste_2019-01-22_16-29-23"}})]),t._v(" "),s("p",[t._v("通过生成pat文件后，再使用ida SDK中提供的sigmake工具来生成相应的sig签名文件，将其复制到ida安装目录下的"),s("code",[t._v("\\sig\\pc")]),t._v("目录，然后我们在ida中就可以载入签名进行识别。在2088个函数中，识别出1271个函数，但是不是每个识别出的函数都能有效的命名，所以实际识别出的函数个数也就600左右，识别率较低，而且只能识别出被制作签名的程序所带的包，如果另一个程序使用了其他的包，那将无法识别，拓展性较低。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_16-34-36.png",alt:"Snipaste_2019-01-22_16-34-36"}})]),t._v(" "),s("h4",{attrs:{id:"bindiff或者diaphora对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bindiff或者diaphora对比"}},[t._v("#")]),t._v(" bindiff或者diaphora对比")]),t._v(" "),s("p",[t._v("通过bindiff或者diaphora来对比不同是ida数据库，以获取函数的特征也是种很好的方法，这种方法在平时分析静态链接的程序也很有用。但是存在的问题也很明显，由于diaphora是python编写的，所以运行速度是肉眼可见的慢，对于1000数量级的函数保存到数据库中竟然也要3分钟左右，保存完之后，再分析对比的时候，需要更多时间，效率很低。当数据完成对比之后，我们得到情况如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_19-56-42.png",alt:"Snipaste_2019-01-22_19-56-41"}})]),t._v(" "),s("p",[t._v("主要分为五栏：完全匹配、部分匹配、只在第一个数据库出现的、只在第二个数据库出现的以及不可靠匹配的。对我们来说，我们只需要关注匹配率高的即可，所以我们首选对完全匹配中的函数进行重命名，方法很简单，就是选中所有的完全匹配的函数，然后右键导入即可。\n该方法的主要问题是速度太慢，不管是在前期初始化数据库的时候，还是后面重命名函数的时候，非常卡顿。其次是对函数类别没有很好的区分度，如下图所示，同样都是运行时函数，对函数类别处理不好，也不能对主函数进行区别，和第一种方式一样，识别率不高，只能识别出被制作签名的程序所带的部分库函数。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_20-10-24.png",alt:"Snipaste_2019-01-22_20-10-24"}})]),t._v(" "),s("h4",{attrs:{id:"rizzo插件生成数据库识别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rizzo插件生成数据库识别"}},[t._v("#")]),t._v(" Rizzo插件生成数据库识别")]),t._v(" "),s("p",[t._v("关于rizzo，可以参看GitHub上的介绍"),s("a",{attrs:{href:"https://github.com/devttys0/ida/blob/master/plugins/rizzo/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rizzo"),s("OutboundLink")],1),t._v("，同样也是一种对ida数据库进行保存然后提取信息进行对比的工具，收录于devttys0的ida脚本目录中。自己也进行了测试，速度还可以。")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("Building Rizzo signatures, this may take a few minutes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nGenerated "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1314")]),t._v(" formal signatures and "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("844")]),t._v(" fuzzy signatures "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1784")]),t._v(" functions "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.64")]),t._v(" seconds.\nSaving signatures to C:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Users"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("xxxxxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Desktop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11111")]),t._v(".riz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". done.\nBuilt signatures "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.30")]),t._v(" seconds\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("那么在保存完之后，载入riz文件进行测试，如下图所示。基本识别情况和上面2种方式差不多，也存在对原始文件的局部依赖性，所不同的是，这种方式不会误识别，而前面2种方式会产生很多未知的函数命名情况，歧义性较低。猜测是前面2种方法对模糊测试效果更好，第三种方式属于保守型的测试方法，会将极大概率的函数进行重命名，而较低的大概率函数则不会通过。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_20-19-06.png",alt:"Snipaste_2019-01-22_20-19-06"}})]),t._v(" "),s("h3",{attrs:{id:"从golang特性出发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从golang特性出发"}},[t._v("#")]),t._v(" 从Golang特性出发")]),t._v(" "),s("p",[t._v("上面的3种方法虽然能对部分函数进行识别，但是效果一半，前2种方法识别率大概有50%左右，第3种只有20%左右。且三者均不能对签名生成程序中没有的函数进行识别，也就是说连每个程序中的主函数都无法定位，因为每个程序中的主函数均不一致。下面将从Go语言的特性来解决这个问题。")]),t._v(" "),s("h4",{attrs:{id:"golangassist脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#golangassist脚本"}},[t._v("#")]),t._v(" GolangAssist脚本")]),t._v(" "),s("p",[t._v("在网上有一篇著名的go语言逆向解析博文，安全客中也有人提供了翻译，链接参见前言部分。该作者对golang的编译原理有着较深的理解，同时其提供了"),s("code",[t._v("golang_loader_assist.py")]),t._v("脚本用于还原符号信息，这对逆向而言真是再好也不为过了。但是这个脚本无法恢复Windows下编译的go程序，因为这个脚本中最重要的部分，是找到go语言程序中一个非常重要的段，叫做"),s("code",[t._v(".gopclntab")]),t._v("，在这个段中保存了函数的实际名称，而在Windows下编译的程序中则不存在这个段。\n在这个脚本中最终的部分如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_20-49-59.png",alt:"Snipaste_2019-01-22_20-49-59"}})]),t._v(" "),s("p",[t._v("首先通过"),s("code",[t._v("get_segm_by_name('.gopclntab')")]),t._v("来定位到"),s("code",[t._v(".gopclntab")]),t._v("段的首地址。然后寻找偏移量是8的地方，根据程序字长来创建指针，再接下来一个字长则给出了"),s("code",[t._v(".gopclntab")]),t._v("段的大小，这样我们就能开始逐个处理每条数据，对每条数据而言，其中都包含了一个函数指针和一个函数名字符串偏移量，循环处理这些数据就能对所有的函数名进行还原，得到带符号信息的函数名称。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_20-34-04.png",alt:"Snipaste_2019-01-22_20-34-04"}})]),t._v(" "),s("p",[t._v("在实际使用这个脚本进行测试的过程中，需要注意的是，由于ida7.0对sdk和api的大量更新和重新，在idapython中的创建字符串函数MakeStr出错，主要原因是函数的重复定义，参看前言中看雪论坛的相关讨论，修改方式如上图所示。")]),t._v(" "),s("p",[t._v("自己将最关键的部分代码进行了分析和抽取，脚本如上，这段代码可直接在ida中运行，用以定位函数名偏移量和修改函数名，但是注意最后这个地方函数名修改会有点问题，原因是函数名中除了下划线不能出现其他字符，但是当我们运行完毕后，很多函数名是存在特殊符号的，需要自己过滤。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("gopclntab "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_segm_by_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.gopclntab'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" gopclntab "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    base "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gopclntab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startEA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算函数名个数")]),t._v("\n    count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Dword"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基地址")]),t._v("\n    base "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("xrange")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建函数指针")]),t._v("\n        MakeQword"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        functionAddr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Qword"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建函数名字符串偏移量（相对于gopclntab基地址而言）")]),t._v("\n        MakeQword"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Qword"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Dword"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" gopclntab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startEA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 函数名字符串偏移量（文件偏移量FOA）")]),t._v("\n        functionName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" gopclntab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startEA\n        name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GetString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("functionName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建字符串")]),t._v("\n        MakeStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("functionName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" functionName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改函数名（ida禁止函数名出现特殊符号，需过滤后才能达到100%效果，我这里没有过滤）")]),t._v("\n        MakeName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("functionAddr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("p",[t._v("运行结果如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_21-28-22.png",alt:"Snipaste_2019-01-22_21-28-22"}})]),t._v(" "),s("p",[t._v("通过分析go语言特有的"),s("code",[t._v(".gopclntab")]),t._v("段，我们可以恢复调试符号信息，只有该段中保存的信息均可以进行恢复，恢复率达到98%以上。")]),t._v(" "),s("h4",{attrs:{id:"idagolanghelper脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idagolanghelper脚本"}},[t._v("#")]),t._v(" IDAGolangHelper脚本")]),t._v(" "),s("p",[t._v("刚刚讨论完了GolangAssist，效果是非常不错的，而作为GolangAssist的升级版本，IDAGolangHelper做的则更加完善，该脚本的作者在2016年底的zeronights会议中展示了他的成果，有兴趣的同学可以参看他的"),s("a",{attrs:{href:"https://2016.zeronights.ru/wp-content/uploads/2016/12/GO_Zaytsev.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("PPT"),s("OutboundLink")],1),t._v("，其实整个脚本的思路和上面一样，同样是通过"),s("code",[t._v(".gopclntab")]),t._v("这个段所保存的符号信息来获取函数信息，如下图所示。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_16-05-52.png",alt:"Snipaste_2019-01-22_16-05-52"}})]),t._v(" "),s("p",[t._v("除此之外，作者进一步分析了go语言的版本问题，通过2种方式来确定当前程序的go语言版本，一是通过特征字符串的来进行查找，二是通过分析go中特有的结构体类型，由于不同版本之间有结构体会产生变化，作者提出了这种思路来确定版本信息。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_16-12-00.png",alt:"Snipaste_2019-01-22_16-12-00"}})]),t._v(" "),s("p",[t._v("而通过实际分析证明，第一种方法，即特征字符串的方式来查找版本还是会更高效，更准确些，相比而言，第二种方法由于版本之间的差异不多，则会导致歧义。下图是使用效果，当我们载入该脚本后，第二种方式只能判断是go1.8或1.9或1.10，但是特征字符串则较好的确定是go1.9版本。在重命名函数后，再搜索main字符串，就能定位到main包中的所有函数了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2019-01/Snipaste_2019-01-22_16-18-35.png",alt:"Snipaste_2019-01-22_16-18-35"}})]),t._v(" "),s("h3",{attrs:{id:"其他方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他方法"}},[t._v("#")]),t._v(" 其他方法")]),t._v(" "),s("p",[t._v("当然无符号问题解决的方法还有很多，比如著名符号执行引擎angr中就使用了"),s("a",{attrs:{href:"https://blog.csdn.net/doudoudouzoule/article/details/81530376",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于函数语义识别库函数"),s("OutboundLink")],1),t._v("，也有人对源码进行了分析。函数语义就是分析函数的功能和执行的操作，包括寄存器、内存、堆栈和对其他函数的调用流，作为人去分析函数的时，也是类似的，所以感觉这里也可以用机器学习的方法来进一步提高分析效率。\n当然学术界也有对这方面的研究，比如"),s("a",{attrs:{href:"http://www.doc88.com/p-1738608789188.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("二进制代码函数相似度匹配技术研究"),s("OutboundLink")],1),t._v("这篇论文，通过函数的序言部分的特征，提出了二阶段函数匹配方法TPM，在识别出相似函数后，找到其调用关系和决策规则，然后递归的识别不同版本的函数，据论文所述，识别准确率平均高于diaphora和patchdiff方法，也是值得借鉴的。")]),t._v(" "),s("h2",{attrs:{id:"结语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),s("p",[t._v("至此，提出的这么多方法，就能较好的解决Go语言程序逆向中的无符号的问题了。而其实对无符号程序的分析一直是逆向工程中的一个难点，如何有效的分析无符号的程序也一直是我们所关心的问题。那么总结起来无外乎以下几点。")]),t._v(" "),s("ol",[s("li",[t._v("从各种语言本身特性出发。比如本文详细讨论的Go语言特性，由于特定段保存了符号信息，从而可以进行恢复。")]),t._v(" "),s("li",[t._v("从代码复用和库函数检测出发。将程序中未知函数和已知功能函数进行某种方式下的对比，比如hash计算、匹配签名、等等。")]),t._v(" "),s("li",[t._v("从函数语义分析出发。也是最常见的硬核分析手段，就是一个一个函数分析其代码实现和功能，从而推断函数的作用，积少成多，就能对整个程序进行逆向。毫无疑问，也可以将人工智能结合到这种方式中，仿照逆向工程师的思路来进行深度学习的，可能也是学术界未来的一个研究方向吧。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);