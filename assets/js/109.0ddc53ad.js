(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{550:function(e,s,t){"use strict";t.r(s);var i=t(14),n=Object(i.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v("学习笔记，结合官方文档和网上资料整理，加强理解\n从angr第二章第六节开始 执行引擎、分析和总结")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("当你想要在angr中单步执行指令时，这一步会进行很多事情来达成这个目标。angr使用一系列的引擎（SimEngine子类中的）来模拟基于给定输入状态的一部分代码。angr的执行核心只是按顺序尝试所有可用的引擎，直到能遇到一个引擎来处理这一步。以下是这些引擎的顺序。")]),e._v(" "),t("ul",[t("li",[e._v("The failure engine kicks in when the previous step took us to some uncontinuable state")]),e._v(" "),t("li",[e._v("The syscall engine kicks in when the previous step ended in a syscall")]),e._v(" "),t("li",[e._v("The hook engine kicks in when the current address is hooked")]),e._v(" "),t("li",[e._v("The unicorn engine kicks in when the "),t("code",[e._v("UNICORN")]),e._v(" state option is enabled and there is no symbolic data in the state")]),e._v(" "),t("li",[e._v("The VEX engine kicks in as the final fallback.")])]),e._v(" "),t("h2",{attrs:{id:"模拟后继simsuccessors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模拟后继simsuccessors"}},[e._v("#")]),e._v(" 模拟后继Simsuccessors")]),e._v(" "),t("p",[e._v("TODO：")]),e._v(" "),t("p",[e._v("The code that actually tries all the engines in turn is "),t("code",[e._v("project.factory.successors(state, **kwargs)")]),e._v(", which passes its arguments onto each of the engines. This function is at the heart of "),t("code",[e._v("state.step()")]),e._v(" and "),t("code",[e._v("simulation_manager.step()")]),e._v(". It returns a SimSuccessors object, which we discussed briefly before. The purpose of SimSuccessors is to perform a simple categorization of the successor states, stored in various list attributes. They are:")]),e._v(" "),t("h2",{attrs:{id:"断点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#断点"}},[e._v("#")]),e._v(" 断点")]),e._v(" "),t("p",[e._v("和任何像样的执行引擎一样，angr也支持断点。")])])}),[],!1,null,null,null);s.default=n.exports}}]);